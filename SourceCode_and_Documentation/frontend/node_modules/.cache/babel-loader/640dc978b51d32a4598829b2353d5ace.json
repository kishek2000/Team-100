{"ast":null,"code":"var _jsxFileName = \"/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/view/WatchMedia.js\";\nimport React from \"react\";\nimport { WatchMediaNav } from \"./WatchMediaNav\";\n\nfunction WatchMediaMetadata({\n  airDate,\n  language,\n  genre\n}) {\n  return [airDate, language, genre].filter(item => !!item).join(\" | \");\n}\n\nexport function WatchMedia({\n  category,\n  content,\n  getOverlayData,\n  num,\n  getOverlayServices,\n  getWatchScore,\n  getTVEpScores\n}) {\n  if (content !== undefined) {\n    const contentStart = content;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"category-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"category-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, category), /*#__PURE__*/React.createElement(WatchMediaNav, {\n      num: num,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"category-media\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, contentStart.map((item, index) => item[\"id\"] !== null ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"media-template\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"media-image-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      index: index,\n      src: item[\"imgURL\"],\n      className: \"media-image\",\n      alt: \"media\",\n      onClick: () => {\n        getOverlayData(item[\"id\"], item[\"type\"]);\n        getOverlayServices(item[\"id\"], item[\"name\"], item[\"popularity\"], item[\"score\"]);\n        getWatchScore(item[\"id\"], item[\"type\"]);\n\n        if (item[\"type\"] === \"tv\") {\n          getTVEpScores(item[\"id\"]);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"watch-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, item[\"name\"]), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"watch-metadata\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(WatchMediaMetadata, {\n      airDate: item[\"first_air_date\"],\n      language: item[\"lang\"],\n      genre: item[\"genre\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 19\n      }\n    }))) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    }))));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 12\n      }\n    });\n  }\n}","map":{"version":3,"sources":["/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/view/WatchMedia.js"],"names":["React","WatchMediaNav","WatchMediaMetadata","airDate","language","genre","filter","item","join","WatchMedia","category","content","getOverlayData","num","getOverlayServices","getWatchScore","getTVEpScores","undefined","contentStart","map","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { WatchMediaNav } from \"./WatchMediaNav\";\n\nfunction WatchMediaMetadata({ airDate, language, genre }) {\n  return [airDate, language, genre].filter((item) => !!item).join(\" | \");\n}\n\nexport function WatchMedia({\n  category,\n  content,\n  getOverlayData,\n  num,\n  getOverlayServices,\n  getWatchScore,\n  getTVEpScores,\n}) {\n  if (content !== undefined) {\n    const contentStart = content;\n    return (\n      <div className=\"category-list\">\n        <p className=\"category-title\">{category}</p>\n        <WatchMediaNav num={num} />\n        <div className=\"category-media\">\n          {contentStart.map((item, index) =>\n            item[\"id\"] !== null ? (\n              <div className=\"media-template\" key={index}>\n                <div className=\"media-image-wrapper\">\n                  {/* <div className=\"media-user-score\">\n                    <span className=\"user-score-text\">\n                      {Math.round(item[\"score\"] * 1000) / 10}%\n                    </span>\n                  </div> */}\n                  <img\n                    index={index}\n                    src={item[\"imgURL\"]}\n                    className=\"media-image\"\n                    alt=\"media\"\n                    onClick={() => {\n                      getOverlayData(item[\"id\"], item[\"type\"]);\n                      getOverlayServices(\n                        item[\"id\"],\n                        item[\"name\"],\n                        item[\"popularity\"],\n                        item[\"score\"]\n                      );\n                      getWatchScore(item[\"id\"], item[\"type\"]);\n                      if (item[\"type\"] === \"tv\") {\n                        getTVEpScores(item[\"id\"]);\n                      }\n                    }}\n                  />\n                </div>\n                <p className=\"watch-title\">{item[\"name\"]}</p>\n                <div className=\"watch-metadata\">\n                  <WatchMediaMetadata\n                    airDate={item[\"first_air_date\"]}\n                    language={item[\"lang\"]}\n                    genre={item[\"genre\"]}\n                  />\n                </div>\n              </div>\n            ) : (\n              <div></div>\n            )\n          )}\n        </div>\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}