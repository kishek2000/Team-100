{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport { Client } from \"../client\"; // Instantiate a single instance of the Client, used across\n// the application for fetching of data.\n\nconst client = new Client(\"http://localhost:8000\");\nexport function AppContainer({\n  children\n}) {\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\n  const [watchData, setWatchData] = useState({});\n  const [listenData, setListenData] = useState({});\n  const [searchQuery, setSearchQuery] = useState({});\n  const [openOverlayID, setOpenOverlayID] = useState(-1);\n  const [overlayData, setOverlayData] = useState({});\n  const getWatchData = useCallback(() => {\n    client.getWatchData().then(data => setWatchData(data));\n  }, [setWatchData]);\n  const getListenData = useCallback(() => {\n    client.getListenData().then(data => setListenData(data));\n  }, [setListenData]);\n  const onSearchQuery = useCallback((query, experience) => {\n    if (experience === \"WATCH\") {\n      client.getWatchSearchResults(query).then(data => {\n        setWatchData(data);\n        setSearchQuery(query);\n      });\n    } else if (experience === \"LISTEN\") {\n      client.getListenSearchResults(query).then(data => {\n        setListenData(data);\n        setSearchQuery(query);\n      });\n    }\n  }, [setSearchQuery, setWatchData, setListenData]);\n  const getOverlayData = useCallback((mediaId, mediaType) => {\n    setOpenOverlayID(mediaId);\n    client.getMediaOverlayData(mediaId, mediaType).then(data => {\n      setOverlayData(data);\n    });\n  }, [setOverlayData]);\n  useEffect(() => {\n    if (mediaSelected === \"WATCH\") {\n      getWatchData();\n    } else {\n      getListenData();\n    }\n  }, [mediaSelected, getWatchData, getListenData]);\n  return children({\n    mediaSelected: mediaSelected,\n    onMediaChange: setMediaSelected,\n    onSearchQuery: onSearchQuery,\n    getWatchData: getWatchData,\n    getListenData: getListenData,\n    getOverlayData: getOverlayData,\n    watch: {\n      data: watchData,\n      fetch: getWatchData\n    },\n    listen: {\n      data: listenData,\n      fetch: getListenData\n    },\n    overlay: {\n      data: overlayData\n    },\n    setOverlayData: setOverlayData,\n    setSearchQuery: setSearchQuery,\n    searchQuery: searchQuery,\n    openOverlayID: openOverlayID,\n    setOpenOverlayID: setOpenOverlayID\n  });\n}","map":{"version":3,"sources":["C:/Users/lje61/Desktop/Repo/Team-100/SourceCode_and_Documentation/frontend/src/state/index.js"],"names":["useState","useEffect","useCallback","Client","client","AppContainer","children","mediaSelected","setMediaSelected","watchData","setWatchData","listenData","setListenData","searchQuery","setSearchQuery","openOverlayID","setOpenOverlayID","overlayData","setOverlayData","getWatchData","then","data","getListenData","onSearchQuery","query","experience","getWatchSearchResults","getListenSearchResults","getOverlayData","mediaId","mediaType","getMediaOverlayData","onMediaChange","watch","fetch","listen","overlay"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\nimport { Client } from \"../client\";\r\n\r\n// Instantiate a single instance of the Client, used across\r\n// the application for fetching of data.\r\nconst client = new Client(\"http://localhost:8000\");\r\n\r\nexport function AppContainer({ children }) {\r\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\r\n  const [watchData, setWatchData] = useState({});\r\n  const [listenData, setListenData] = useState({});\r\n  const [searchQuery, setSearchQuery] = useState({});\r\n  const [openOverlayID, setOpenOverlayID] = useState(-1);\r\n  const [overlayData, setOverlayData] = useState({});\r\n\r\n  const getWatchData = useCallback(() => {\r\n    client.getWatchData().then((data) => setWatchData(data));\r\n  }, [setWatchData]);\r\n\r\n  const getListenData = useCallback(() => {\r\n    client.getListenData().then((data) => setListenData(data));\r\n  }, [setListenData]);\r\n\r\n  const onSearchQuery = useCallback(\r\n    (query, experience) => {\r\n      if (experience === \"WATCH\") {\r\n        client.getWatchSearchResults(query).then((data) => {\r\n          setWatchData(data);\r\n          setSearchQuery(query);\r\n        });\r\n      } else if (experience === \"LISTEN\") {\r\n        client.getListenSearchResults(query).then((data) => {\r\n          setListenData(data);\r\n          setSearchQuery(query);\r\n        });\r\n      }\r\n    },\r\n    [setSearchQuery, setWatchData, setListenData]\r\n  );\r\n\r\n  const getOverlayData = useCallback(\r\n    (mediaId, mediaType) => {\r\n      setOpenOverlayID(mediaId);\r\n      client.getMediaOverlayData(mediaId, mediaType).then((data) => {\r\n        setOverlayData(data);\r\n      });\r\n    },\r\n    [setOverlayData]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (mediaSelected === \"WATCH\") {\r\n      getWatchData();\r\n    } else {\r\n      getListenData();\r\n    }\r\n  }, [mediaSelected, getWatchData, getListenData]);\r\n\r\n  return children({\r\n    mediaSelected: mediaSelected,\r\n    onMediaChange: setMediaSelected,\r\n    onSearchQuery: onSearchQuery,\r\n    getWatchData: getWatchData,\r\n    getListenData: getListenData,\r\n    getOverlayData: getOverlayData,\r\n    watch: { data: watchData, fetch: getWatchData },\r\n    listen: { data: listenData, fetch: getListenData },\r\n    overlay: { data: overlayData },\r\n    setOverlayData: setOverlayData,\r\n    setSearchQuery: setSearchQuery,\r\n    searchQuery: searchQuery,\r\n    openOverlayID: openOverlayID,\r\n    setOpenOverlayID: setOpenOverlayID,\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}