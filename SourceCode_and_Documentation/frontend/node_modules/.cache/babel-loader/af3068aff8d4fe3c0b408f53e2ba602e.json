{"ast":null,"code":"var _jsxFileName = \"/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/view/WatchExperience.js\";\nimport React, { useState } from \"react\";\nimport { MediaCategoryList } from \"./MediaCategoryList\";\nimport LoadingSpinner from \"../images/tail-spin.svg\";\nimport { FilterWatchBar } from \"./FilterWatchBar\";\nimport { WATCH_CATEGORIES } from \"../constants/index\"; // This function will give us the complete watch experience!\n\nexport function WatchExperience({\n  watch,\n  searchQuery,\n  getOverlayData,\n  getOverlayServices,\n  getWatchScore,\n  getTVEpScores,\n  setMovGenresSelected,\n  setTVGenresSelected,\n  getWatchData,\n  getWatchFilteredData,\n  movieGenreOptions,\n  tvGenreOptions,\n  tvGenresSelected,\n  movGenresSelected\n}) {\n  const {\n    data\n  } = watch;\n  const WATCH_LISTS = [\"Trending\", \"Top Rated\", \"On Air\"];\n  const WATCH_SUBLISTS = [\"TV Shows\", \"Movies\"];\n\n  if (Object.keys(data).length) {\n    if (searchQuery.length > 0 && !data[\"Search Results\"]) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"loading-screen\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"loading-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }\n      }, \"LOADING SEARCH RESULTS...\"), /*#__PURE__*/React.createElement(\"img\", {\n        src: LoadingSpinner,\n        alt: \"load\",\n        className: \"loader\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }\n      }));\n    } else if (searchQuery.length === 0 && data[\"Search Results\"]) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"loading-screen\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"loading-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }\n      }, \"LOADING WATCH ITEMS...\"), /*#__PURE__*/React.createElement(\"img\", {\n        src: LoadingSpinner,\n        alt: \"load\",\n        className: \"loader\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }\n      }));\n    } else if (searchQuery.length > 0 && data[`Search Results`]) {\n      const tv_results = data[`Search Results`][\"TV Results\"];\n      const movie_results = data[`Search Results`][\"Movie Results\"];\n      console.table(data[`Search Results`]);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"search-results\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }, tv_results.length > 0 || movie_results.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"search-results-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }\n      }, \"Search Results for \\\"\", searchQuery, \"\\\"\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"search-watch-lists\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MediaCategoryList, {\n        category: \"TV Results\",\n        media: \"WATCH\",\n        mediaContent: tv_results,\n        getOverlayData: getOverlayData,\n        getOverlayServices: getOverlayServices,\n        getWatchScore: getWatchScore,\n        getTVEpScores: getTVEpScores,\n        num: \"0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(MediaCategoryList, {\n        category: \"Movie Results\",\n        media: \"WATCH\",\n        mediaContent: movie_results,\n        getOverlayData: getOverlayData,\n        getOverlayServices: getOverlayServices,\n        getWatchScore: getWatchScore,\n        getTVEpScores: getTVEpScores,\n        num: \"1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }\n      }))) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"category-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }\n      }, \"Sorry! No results were found.\"));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"watch-experience-lists\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }\n      }, WATCH_LISTS.map((category, num) => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"watch-category-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }\n      }, console.log(num), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"category-title-big\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }\n      }, category), /*#__PURE__*/React.createElement(FilterWatchBar, {\n        setMovGenresSelected: setMovGenresSelected,\n        setTVGenresSelected: setTVGenresSelected,\n        getWatchData: getWatchData,\n        getWatchFilteredData: getWatchFilteredData,\n        movieGenreOptions: movieGenreOptions,\n        tvGenreOptions: tvGenreOptions,\n        tvGenresSelected: tvGenresSelected,\n        movGenresSelected: movGenresSelected,\n        watchCategory: WATCH_CATEGORIES[category],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }\n      }, WATCH_SUBLISTS.map((item, index) => /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(MediaCategoryList, {\n        category: `${category} ${item}`,\n        media: \"WATCH\",\n        mediaContent: data[`${category} ${item}`],\n        getOverlayData: getOverlayData,\n        getOverlayServices: getOverlayServices,\n        getWatchScore: getWatchScore,\n        getTVEpScores: getTVEpScores,\n        num: num + index + 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }\n      })))))));\n    }\n  } else {\n    // TODO: add loading state\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading-screen\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }\n    }, \"LOADING WATCH ITEMS...\"), /*#__PURE__*/React.createElement(\"img\", {\n      src: LoadingSpinner,\n      alt: \"load\",\n      className: \"loader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }\n    }));\n  }\n}","map":{"version":3,"sources":["/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/view/WatchExperience.js"],"names":["React","useState","MediaCategoryList","FilterWatchBar","WATCH_CATEGORIES","WatchExperience","watch","searchQuery","getOverlayData","getOverlayServices","getWatchScore","getTVEpScores","setMovGenresSelected","setTVGenresSelected","getWatchData","getWatchFilteredData","movieGenreOptions","tvGenreOptions","tvGenresSelected","movGenresSelected","data","WATCH_LISTS","WATCH_SUBLISTS","Object","keys","length","LoadingSpinner","tv_results","movie_results","console","table","map","category","num","log","item","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { MediaCategoryList } from \"./MediaCategoryList\";\nimport LoadingSpinner from \"../images/tail-spin.svg\";\nimport { FilterWatchBar } from \"./FilterWatchBar\";\nimport { WATCH_CATEGORIES } from \"../constants/index\";\n\n// This function will give us the complete watch experience!\nexport function WatchExperience({\n  watch,\n  searchQuery,\n  getOverlayData,\n  getOverlayServices,\n  getWatchScore,\n  getTVEpScores,\n  setMovGenresSelected,\n  setTVGenresSelected,\n  getWatchData,\n  getWatchFilteredData,\n  movieGenreOptions,\n  tvGenreOptions,\n  tvGenresSelected,\n  movGenresSelected,\n}) {\n  const { data } = watch;\n  const WATCH_LISTS = [\"Trending\", \"Top Rated\", \"On Air\"];\n  const WATCH_SUBLISTS = [\"TV Shows\", \"Movies\"];\n  if (Object.keys(data).length) {\n    if (searchQuery.length > 0 && !data[\"Search Results\"]) {\n      return (\n        <div className=\"loading-screen\">\n          <div className=\"loading-text\">LOADING SEARCH RESULTS...</div>\n          <img src={LoadingSpinner} alt=\"load\" className=\"loader\" />\n        </div>\n      );\n    } else if (searchQuery.length === 0 && data[\"Search Results\"]) {\n      return (\n        <div className=\"loading-screen\">\n          <div className=\"loading-text\">LOADING WATCH ITEMS...</div>\n          <img src={LoadingSpinner} alt=\"load\" className=\"loader\" />\n        </div>\n      );\n    } else if (searchQuery.length > 0 && data[`Search Results`]) {\n      const tv_results = data[`Search Results`][\"TV Results\"];\n      const movie_results = data[`Search Results`][\"Movie Results\"];\n      console.table(data[`Search Results`]);\n      return (\n        <div className=\"search-results\">\n          {tv_results.length > 0 || movie_results.length > 0 ? (\n            <div>\n              <div className=\"search-results-title\">\n                Search Results for \"{searchQuery}\"\n              </div>\n              <div className=\"search-watch-lists\">\n                <MediaCategoryList\n                  category=\"TV Results\"\n                  media=\"WATCH\"\n                  mediaContent={tv_results}\n                  getOverlayData={getOverlayData}\n                  getOverlayServices={getOverlayServices}\n                  getWatchScore={getWatchScore}\n                  getTVEpScores={getTVEpScores}\n                  num=\"0\"\n                />\n                <MediaCategoryList\n                  category=\"Movie Results\"\n                  media=\"WATCH\"\n                  mediaContent={movie_results}\n                  getOverlayData={getOverlayData}\n                  getOverlayServices={getOverlayServices}\n                  getWatchScore={getWatchScore}\n                  getTVEpScores={getTVEpScores}\n                  num=\"1\"\n                />\n              </div>\n            </div>\n          ) : (\n            <div className=\"category-title\">Sorry! No results were found.</div>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"watch-experience-lists\">\n          {/* <MediaCategoryList\n            category=\"Trending Daily\"\n            media=\"WATCH\"\n            mediaContent={data[\"Trending Daily\"]}\n            getOverlayData={getOverlayData}\n            getOverlayServices={getOverlayServices}\n            getWatchScore={getWatchScore}\n            getTVEpScores={getTVEpScores}\n            num=\"0\"\n          /> */}\n          {WATCH_LISTS.map((category, num) => (\n            <div>\n              <div className=\"watch-category-header\">\n                {console.log(num)}\n                <div className=\"category-title-big\">{category}</div>\n                <FilterWatchBar\n                  setMovGenresSelected={setMovGenresSelected}\n                  setTVGenresSelected={setTVGenresSelected}\n                  getWatchData={getWatchData}\n                  getWatchFilteredData={getWatchFilteredData}\n                  movieGenreOptions={movieGenreOptions}\n                  tvGenreOptions={tvGenreOptions}\n                  tvGenresSelected={tvGenresSelected}\n                  movGenresSelected={movGenresSelected}\n                  watchCategory={WATCH_CATEGORIES[category]}\n                />\n              </div>\n              <div>\n                {WATCH_SUBLISTS.map((item, index) => (\n                  <div key={index}>\n                    <MediaCategoryList\n                      category={`${category} ${item}`}\n                      media=\"WATCH\"\n                      mediaContent={data[`${category} ${item}`]}\n                      getOverlayData={getOverlayData}\n                      getOverlayServices={getOverlayServices}\n                      getWatchScore={getWatchScore}\n                      getTVEpScores={getTVEpScores}\n                      num={num + index + 1}\n                    />\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n          {/* <MediaCategoryList\n            category=\"Trending Movies\"\n            media=\"WATCH\"\n            mediaContent={data[\"Trending Movies\"]}\n            getOverlayData={getOverlayData}\n            getOverlayServices={getOverlayServices}\n            getWatchScore={getWatchScore}\n            getTVEpScores={getTVEpScores}\n            num=\"1\"\n          />\n          <div className=\"category-title-big\">Top Rated</div>\n          <MediaCategoryList\n            category=\"Top Rated TV Shows\"\n            media=\"WATCH\"\n            mediaContent={data[\"Top Rated TV Shows\"]}\n            getOverlayData={getOverlayData}\n            getOverlayServices={getOverlayServices}\n            getWatchScore={getWatchScore}\n            getTVEpScores={getTVEpScores}\n            num=\"2\"\n          />\n          <MediaCategoryList\n            category=\"Top Rated Movies\"\n            media=\"WATCH\"\n            mediaContent={data[\"Top Rated Movies\"]}\n            getOverlayData={getOverlayData}\n            getOverlayServices={getOverlayServices}\n            getWatchScore={getWatchScore}\n            getTVEpScores={getTVEpScores}\n            num=\"4\"\n          />\n          <div className=\"category-title-big\">Now Showing</div>\n          <MediaCategoryList\n            category=\"On Air TV Shows\"\n            media=\"WATCH\"\n            mediaContent={data[\"On Air TV Shows\"]}\n            getOverlayData={getOverlayData}\n            getOverlayServices={getOverlayServices}\n            getWatchScore={getWatchScore}\n            getTVEpScores={getTVEpScores}\n            num=\"3\"\n          /> */}\n        </div>\n      );\n    }\n  } else {\n    // TODO: add loading state\n    return (\n      <div className=\"loading-screen\">\n        <div className=\"loading-text\">LOADING WATCH ITEMS...</div>\n        <img src={LoadingSpinner} alt=\"load\" className=\"loader\" />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}