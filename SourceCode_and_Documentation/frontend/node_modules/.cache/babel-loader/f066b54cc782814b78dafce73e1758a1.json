{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport { Client } from \"../client\"; // Instantiate a single instance of the Client, used across\n// the application for fetching of data.\n\nconst client = new Client(\"http://localhost:8000\");\nexport function AppContainer({\n  children\n}) {\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\n  const [watchData, setWatchData] = useState({});\n  const [listenData, setListenData] = useState({});\n  const [searchQuery, setSearchQuery] = useState({});\n  const [serviceSelections, setServiceSelections] = useState({});\n  const [serviceOptions, setServiceOptions] = useState({});\n  const [region, setRegion] = useState(\"AU\");\n  const [openOverlayID, setOpenOverlayID] = useState(-1);\n  const [overlayData, setOverlayData] = useState({});\n  const getWatchData = useCallback(() => {\n    client.getWatchData().then(data => setWatchData(data));\n  }, [setWatchData]);\n  const getListenData = useCallback(() => {\n    client.getListenData().then(data => setListenData(data));\n  }, [setListenData]);\n  const getServiceOptions = useCallback(() => {\n    client.getWatchRegionServices(region).then(data => {\n      setServiceOptions(data);\n      console.log(\"this is our service options: \", serviceOptions);\n    });\n  }, [setServiceOptions]);\n  const onSearchQuery = useCallback((query, experience, services) => {\n    if (experience === \"WATCH\") {\n      client.getWatchSearchResults(query, services).then(data => {\n        setWatchData(data);\n        setSearchQuery(query);\n      });\n    } else if (experience === \"LISTEN\") {\n      client.getListenSearchResults(query, services).then(data => {\n        setListenData(data);\n        setSearchQuery(query);\n      });\n    }\n  }, [setSearchQuery, setWatchData, setListenData]);\n  const getOverlayData = useCallback((mediaId, mediaType) => {\n    setOpenOverlayID(mediaId);\n    client.getMediaOverlayData(mediaId, mediaType).then(data => {\n      setOverlayData(data);\n    });\n  }, [setOverlayData]);\n  useEffect(() => {\n    if (mediaSelected === \"WATCH\") {\n      getWatchData();\n    } else {\n      getListenData();\n    }\n  }, [mediaSelected, getWatchData, getListenData]);\n  return children({\n    mediaSelected: mediaSelected,\n    onMediaChange: setMediaSelected,\n    onSearchQuery: onSearchQuery,\n    getWatchData: getWatchData,\n    getListenData: getListenData,\n    getOverlayData: getOverlayData,\n    watch: {\n      data: watchData,\n      fetch: getWatchData\n    },\n    listen: {\n      data: listenData,\n      fetch: getListenData\n    },\n    overlay: {\n      data: overlayData\n    },\n    setOverlayData: setOverlayData,\n    setSearchQuery: setSearchQuery,\n    searchQuery: searchQuery,\n    openOverlayID: openOverlayID,\n    setOpenOverlayID: setOpenOverlayID,\n    setServiceOptions: setServiceOptions,\n    serviceOptions: serviceOptions,\n    serviceSelections: serviceSelections,\n    setServiceSelections: setServiceSelections,\n    region: region,\n    setRegion: setRegion,\n    getServiceOptions: getServiceOptions\n  });\n}","map":{"version":3,"sources":["/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/state/index.js"],"names":["useState","useEffect","useCallback","Client","client","AppContainer","children","mediaSelected","setMediaSelected","watchData","setWatchData","listenData","setListenData","searchQuery","setSearchQuery","serviceSelections","setServiceSelections","serviceOptions","setServiceOptions","region","setRegion","openOverlayID","setOpenOverlayID","overlayData","setOverlayData","getWatchData","then","data","getListenData","getServiceOptions","getWatchRegionServices","console","log","onSearchQuery","query","experience","services","getWatchSearchResults","getListenSearchResults","getOverlayData","mediaId","mediaType","getMediaOverlayData","onMediaChange","watch","fetch","listen","overlay"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { Client } from \"../client\";\n\n// Instantiate a single instance of the Client, used across\n// the application for fetching of data.\nconst client = new Client(\"http://localhost:8000\");\n\nexport function AppContainer({ children }) {\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\n  const [watchData, setWatchData] = useState({});\n  const [listenData, setListenData] = useState({});\n  const [searchQuery, setSearchQuery] = useState({});\n  const [serviceSelections, setServiceSelections] = useState({});\n  const [serviceOptions, setServiceOptions] = useState({});\n  const [region, setRegion] = useState(\"AU\");\n  const [openOverlayID, setOpenOverlayID] = useState(-1);\n  const [overlayData, setOverlayData] = useState({});\n\n  const getWatchData = useCallback(() => {\n    client.getWatchData().then((data) => setWatchData(data));\n  }, [setWatchData]);\n\n  const getListenData = useCallback(() => {\n    client.getListenData().then((data) => setListenData(data));\n  }, [setListenData]);\n\n  const getServiceOptions = useCallback(() => {\n    client.getWatchRegionServices(region).then((data) => {\n      setServiceOptions(data);\n      console.log(\"this is our service options: \", serviceOptions);\n    });\n  }, [setServiceOptions]);\n\n  const onSearchQuery = useCallback(\n    (query, experience, services) => {\n      if (experience === \"WATCH\") {\n        client.getWatchSearchResults(query, services).then((data) => {\n          setWatchData(data);\n          setSearchQuery(query);\n        });\n      } else if (experience === \"LISTEN\") {\n        client.getListenSearchResults(query, services).then((data) => {\n          setListenData(data);\n          setSearchQuery(query);\n        });\n      }\n    },\n    [setSearchQuery, setWatchData, setListenData]\n  );\n\n  const getOverlayData = useCallback(\n    (mediaId, mediaType) => {\n      setOpenOverlayID(mediaId);\n      client.getMediaOverlayData(mediaId, mediaType).then((data) => {\n        setOverlayData(data);\n      });\n    },\n    [setOverlayData]\n  );\n\n  useEffect(() => {\n    if (mediaSelected === \"WATCH\") {\n      getWatchData();\n    } else {\n      getListenData();\n    }\n  }, [mediaSelected, getWatchData, getListenData]);\n\n  return children({\n    mediaSelected: mediaSelected,\n    onMediaChange: setMediaSelected,\n    onSearchQuery: onSearchQuery,\n    getWatchData: getWatchData,\n    getListenData: getListenData,\n    getOverlayData: getOverlayData,\n    watch: { data: watchData, fetch: getWatchData },\n    listen: { data: listenData, fetch: getListenData },\n    overlay: { data: overlayData },\n    setOverlayData: setOverlayData,\n    setSearchQuery: setSearchQuery,\n    searchQuery: searchQuery,\n    openOverlayID: openOverlayID,\n    setOpenOverlayID: setOpenOverlayID,\n    setServiceOptions: setServiceOptions,\n    serviceOptions: serviceOptions,\n    serviceSelections: serviceSelections,\n    setServiceSelections: setServiceSelections,\n    region: region,\n    setRegion: setRegion,\n    getServiceOptions: getServiceOptions,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}