{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport { Client } from \"../client\"; // Instantiate a single instance of the Client, used across\n// the application for fetching of data.\n\nconst client = new Client(\"http://localhost:8000\");\nexport function AppContainer({\n  children\n}) {\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\n  const [watchData, setWatchData] = useState({});\n  const [listenData, setListenData] = useState({});\n  const getWatchData = useCallback(() => {\n    client.getWatchData().then(data => setWatchData(data));\n  }, [setWatchData]);\n  const getListenData = useCallback(() => {\n    client.getListenData().then(data => setListenData(data));\n  }, [setListenData]); // const onSearchQuery = (query, experience) => {\n  //   client.search(query, experience).then(data => {\n  //     if (experience === 'WATCH') {\n  //       setWatchData(data);\n  //     } else {\n  //       setListenData(data);\n  //     }\n  //   })\n  // };\n\n  useEffect(() => {\n    if (mediaSelected === \"WATCH\") {\n      getWatchData();\n    } else {\n      getListenData();\n    }\n  }, [mediaSelected, getWatchData, getListenData]);\n  return children({\n    mediaSelected: mediaSelected,\n    onMediaChange: setMediaSelected,\n    onSearchQuery: onSearchQuery,\n    watch: {\n      data: watchData,\n      fetch: getWatchData\n    },\n    listen: {\n      data: listenData,\n      fetch: getListenData\n    }\n  });\n}","map":{"version":3,"sources":["/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/state/index.js"],"names":["useState","useEffect","useCallback","Client","client","AppContainer","children","mediaSelected","setMediaSelected","watchData","setWatchData","listenData","setListenData","getWatchData","then","data","getListenData","onMediaChange","onSearchQuery","watch","fetch","listen"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,MAAT,QAAuB,WAAvB,C,CAEA;AACA;;AACA,MAAMC,MAAM,GAAG,IAAID,MAAJ,CAAW,uBAAX,CAAf;AAEA,OAAO,SAASE,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACzC,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,OAAD,CAAlD;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAMa,YAAY,GAAGX,WAAW,CAAC,MAAM;AACrCE,IAAAA,MAAM,CAACS,YAAP,GAAsBC,IAAtB,CAA2BC,IAAI,IAAIL,YAAY,CAACK,IAAD,CAA/C;AACD,GAF+B,EAE7B,CAACL,YAAD,CAF6B,CAAhC;AAIA,QAAMM,aAAa,GAAGd,WAAW,CAAC,MAAM;AACtCE,IAAAA,MAAM,CAACY,aAAP,GAAuBF,IAAvB,CAA4BC,IAAI,IAAIH,aAAa,CAACG,IAAD,CAAjD;AACD,GAFgC,EAE9B,CAACH,aAAD,CAF8B,CAAjC,CARyC,CAYzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,aAAa,KAAK,OAAtB,EAA+B;AAC7BM,MAAAA,YAAY;AACb,KAFD,MAEO;AACLG,MAAAA,aAAa;AACd;AACF,GANQ,EAMN,CAACT,aAAD,EAAgBM,YAAhB,EAA8BG,aAA9B,CANM,CAAT;AAQA,SAAOV,QAAQ,CAAC;AACdC,IAAAA,aAAa,EAAEA,aADD;AAEdU,IAAAA,aAAa,EAAET,gBAFD;AAGdU,IAAAA,aAAa,EAAEA,aAHD;AAIdC,IAAAA,KAAK,EAAE;AAAEJ,MAAAA,IAAI,EAAEN,SAAR;AAAmBW,MAAAA,KAAK,EAAEP;AAA1B,KAJO;AAKdQ,IAAAA,MAAM,EAAE;AAAEN,MAAAA,IAAI,EAAEJ,UAAR;AAAoBS,MAAAA,KAAK,EAAEJ;AAA3B;AALM,GAAD,CAAf;AAOD","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { Client } from \"../client\";\n\n// Instantiate a single instance of the Client, used across\n// the application for fetching of data.\nconst client = new Client(\"http://localhost:8000\");\n\nexport function AppContainer({ children }) {\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\n  const [watchData, setWatchData] = useState({});\n  const [listenData, setListenData] = useState({});\n  const getWatchData = useCallback(() => {\n    client.getWatchData().then(data => setWatchData(data));\n  }, [setWatchData]);\n\n  const getListenData = useCallback(() => {\n    client.getListenData().then(data => setListenData(data));\n  }, [setListenData]);\n\n  // const onSearchQuery = (query, experience) => {\n  //   client.search(query, experience).then(data => {\n  //     if (experience === 'WATCH') {\n  //       setWatchData(data);\n  //     } else {\n  //       setListenData(data);\n  //     }\n  //   })\n  // };\n\n  useEffect(() => {\n    if (mediaSelected === \"WATCH\") {\n      getWatchData();\n    } else {\n      getListenData();\n    }\n  }, [mediaSelected, getWatchData, getListenData]);\n\n  return children({\n    mediaSelected: mediaSelected,\n    onMediaChange: setMediaSelected,\n    onSearchQuery: onSearchQuery,\n    watch: { data: watchData, fetch: getWatchData },\n    listen: { data: listenData, fetch: getListenData }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}