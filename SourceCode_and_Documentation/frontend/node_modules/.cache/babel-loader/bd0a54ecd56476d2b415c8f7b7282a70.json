{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport { Client } from \"../client\"; // Instantiate a single instance of the Client, used across\n// the application for fetching of data.\n\nconst client = new Client(\"http://localhost:8000\");\nexport function AppContainer({\n  children\n}) {\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\n  const [watchData, setWatchData] = useState({});\n  const [listenData, setListenData] = useState({});\n  const [searchQuery, setSearchQuery] = useState({});\n  const getWatchData = useCallback(() => {\n    client.getWatchData().then(data => setWatchData(data));\n  }, [setWatchData]);\n  const getListenData = useCallback(() => {\n    client.getListenData().then(data => setListenData(data));\n  }, [setListenData]);\n  const onSearchQuery = useCallback((query, experience) => {\n    if (experience === \"WATCH\") {\n      client.getWatchSearchResults(query).then(data => {\n        setWatchData(data);\n        setSearchQuery(query);\n      });\n    } else if (experience === \"LISTEN\") {\n      client.getListenSearchResults(query).then(data => {\n        setListenData(data);\n        setSearchQuery(query);\n      });\n    }\n  }, [setSearchQuery, setWatchData, setListenData]);\n  useEffect(() => {\n    if (mediaSelected === \"WATCH\") {\n      getWatchData();\n    } else {\n      getListenData();\n    }\n  }, [mediaSelected, getWatchData, getListenData]);\n  return children({\n    mediaSelected: mediaSelected,\n    onMediaChange: setMediaSelected,\n    onSearchQuery: onSearchQuery,\n    getWatchData: getWatchData,\n    getListenData: getListenData,\n    watch: {\n      data: watchData,\n      fetch: getWatchData\n    },\n    listen: {\n      data: listenData,\n      fetch: getListenData\n    },\n    setSearchQuery: setSearchQuery,\n    searchQuery: searchQuery\n  });\n}","map":{"version":3,"sources":["/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/state/index.js"],"names":["useState","useEffect","useCallback","Client","client","AppContainer","children","mediaSelected","setMediaSelected","watchData","setWatchData","listenData","setListenData","searchQuery","setSearchQuery","getWatchData","then","data","getListenData","onSearchQuery","query","experience","getWatchSearchResults","getListenSearchResults","onMediaChange","watch","fetch","listen"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,MAAT,QAAuB,WAAvB,C,CAEA;AACA;;AACA,MAAMC,MAAM,GAAG,IAAID,MAAJ,CAAW,uBAAX,CAAf;AAEA,OAAO,SAASE,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACzC,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,OAAD,CAAlD;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAMe,YAAY,GAAGb,WAAW,CAAC,MAAM;AACrCE,IAAAA,MAAM,CAACW,YAAP,GAAsBC,IAAtB,CAA2BC,IAAI,IAAIP,YAAY,CAACO,IAAD,CAA/C;AACD,GAF+B,EAE7B,CAACP,YAAD,CAF6B,CAAhC;AAIA,QAAMQ,aAAa,GAAGhB,WAAW,CAAC,MAAM;AACtCE,IAAAA,MAAM,CAACc,aAAP,GAAuBF,IAAvB,CAA4BC,IAAI,IAAIL,aAAa,CAACK,IAAD,CAAjD;AACD,GAFgC,EAE9B,CAACL,aAAD,CAF8B,CAAjC;AAIA,QAAMO,aAAa,GAAGjB,WAAW,CAC/B,CAACkB,KAAD,EAAQC,UAAR,KAAuB;AACrB,QAAIA,UAAU,KAAK,OAAnB,EAA4B;AAC1BjB,MAAAA,MAAM,CAACkB,qBAAP,CAA6BF,KAA7B,EAAoCJ,IAApC,CAAyCC,IAAI,IAAI;AAC/CP,QAAAA,YAAY,CAACO,IAAD,CAAZ;AACAH,QAAAA,cAAc,CAACM,KAAD,CAAd;AACD,OAHD;AAID,KALD,MAKO,IAAIC,UAAU,KAAK,QAAnB,EAA6B;AAClCjB,MAAAA,MAAM,CAACmB,sBAAP,CAA8BH,KAA9B,EAAqCJ,IAArC,CAA0CC,IAAI,IAAI;AAChDL,QAAAA,aAAa,CAACK,IAAD,CAAb;AACAH,QAAAA,cAAc,CAACM,KAAD,CAAd;AACD,OAHD;AAID;AACF,GAb8B,EAc/B,CAACN,cAAD,EAAiBJ,YAAjB,EAA+BE,aAA/B,CAd+B,CAAjC;AAiBAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,aAAa,KAAK,OAAtB,EAA+B;AAC7BQ,MAAAA,YAAY;AACb,KAFD,MAEO;AACLG,MAAAA,aAAa;AACd;AACF,GANQ,EAMN,CAACX,aAAD,EAAgBQ,YAAhB,EAA8BG,aAA9B,CANM,CAAT;AAQA,SAAOZ,QAAQ,CAAC;AACdC,IAAAA,aAAa,EAAEA,aADD;AAEdiB,IAAAA,aAAa,EAAEhB,gBAFD;AAGdW,IAAAA,aAAa,EAAEA,aAHD;AAIdJ,IAAAA,YAAY,EAAEA,YAJA;AAKdG,IAAAA,aAAa,EAAEA,aALD;AAMdO,IAAAA,KAAK,EAAE;AAAER,MAAAA,IAAI,EAAER,SAAR;AAAmBiB,MAAAA,KAAK,EAAEX;AAA1B,KANO;AAOdY,IAAAA,MAAM,EAAE;AAAEV,MAAAA,IAAI,EAAEN,UAAR;AAAoBe,MAAAA,KAAK,EAAER;AAA3B,KAPM;AAQdJ,IAAAA,cAAc,EAAEA,cARF;AASdD,IAAAA,WAAW,EAAEA;AATC,GAAD,CAAf;AAWD","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { Client } from \"../client\";\n\n// Instantiate a single instance of the Client, used across\n// the application for fetching of data.\nconst client = new Client(\"http://localhost:8000\");\n\nexport function AppContainer({ children }) {\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\n  const [watchData, setWatchData] = useState({});\n  const [listenData, setListenData] = useState({});\n  const [searchQuery, setSearchQuery] = useState({});\n\n  const getWatchData = useCallback(() => {\n    client.getWatchData().then(data => setWatchData(data));\n  }, [setWatchData]);\n\n  const getListenData = useCallback(() => {\n    client.getListenData().then(data => setListenData(data));\n  }, [setListenData]);\n\n  const onSearchQuery = useCallback(\n    (query, experience) => {\n      if (experience === \"WATCH\") {\n        client.getWatchSearchResults(query).then(data => {\n          setWatchData(data);\n          setSearchQuery(query);\n        });\n      } else if (experience === \"LISTEN\") {\n        client.getListenSearchResults(query).then(data => {\n          setListenData(data);\n          setSearchQuery(query);\n        });\n      }\n    },\n    [setSearchQuery, setWatchData, setListenData]\n  );\n\n  useEffect(() => {\n    if (mediaSelected === \"WATCH\") {\n      getWatchData();\n    } else {\n      getListenData();\n    }\n  }, [mediaSelected, getWatchData, getListenData]);\n\n  return children({\n    mediaSelected: mediaSelected,\n    onMediaChange: setMediaSelected,\n    onSearchQuery: onSearchQuery,\n    getWatchData: getWatchData,\n    getListenData: getListenData,\n    watch: { data: watchData, fetch: getWatchData },\n    listen: { data: listenData, fetch: getListenData },\n    setSearchQuery: setSearchQuery,\n    searchQuery: searchQuery\n  });\n}\n"]},"metadata":{},"sourceType":"module"}