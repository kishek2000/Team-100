{"ast":null,"code":"export class Client {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n  }\n\n  async api(endpoint) {\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    if (!response.ok) {\n      throw Error(response.text);\n    } else {\n      return await response.json();\n    }\n  }\n\n  async getWatchData() {\n    const data = await this.api(\"/api/home/watch\");\n    return data;\n  }\n\n  async getListenData() {\n    const data = await this.api(\"/api/home/listen\");\n    return data;\n  }\n\n  async getFilteredWatchData(movieGenres, tvGenres) {\n    if (String(movieGenres).length === 0 && String(tvGenres).length > 0) {\n      const data = await this.api(`/api/home/watch/filtered/none/${tvGenres}`);\n      return data;\n    } else if (String(tvGenres).length === 0 && String(movieGenres).length > 0) {\n      const data = await this.api(`/api/home/watch/filtered/${movieGenres}/none`);\n      return data;\n    } else {\n      const data = await this.api(`/api/home/watch/filtered/${movieGenres}/${tvGenres}`);\n      return data;\n    }\n  }\n\n  async getWatchSearchResults(query, services) {\n    if (services === undefined || Object.keys(services).length === 0) {\n      const data = await this.api(`/api/search/watch/unfiltered/${query}`);\n      return data;\n    } else {\n      const data = await this.api(`/api/search/watch/filtered/${query}/${services}`);\n      return data;\n    }\n  }\n\n  async getWatchRegionServices(region) {\n    const data = await this.api(`/api/search/watch/filters/${region}`);\n    return data.list;\n  }\n\n  async getListenSearchResults(query) {\n    const data = await this.api(`/api/search/listen/${query}`);\n    return data;\n  }\n\n  async getMediaOverlayData(mediaId, mediaType) {\n    const data = await this.api(`/api/details/${mediaType.toLowerCase()}/${mediaId}`);\n    return data.data;\n  }\n\n  async getWatchIMDBScore(tmdbID, mediaType) {\n    const data = await this.api(`/api/reviews/title/${tmdbID}/${mediaType}`);\n    return data.rating;\n  }\n\n  async getTVEpisodeRatings(tmdbID) {\n    const data = await this.api(`/api/reviews/episodes/${tmdbID}`);\n    return data.episodes;\n  }\n\n  async getWatchStreams(tmdbID, tmdbTitle, releaseYear, mediaType) {\n    const data = await this.api(`/api/services/tv/${tmdbID}/${tmdbTitle}/${releaseYear}/${mediaType}`);\n    return data.data;\n  }\n\n  async getListenYoutube(spotifyID, type) {\n    const data = await this.api(`/api/services/listen/${spotifyID}/${type}`);\n    return data.data;\n  }\n\n  async getListenCatPlaylists(categoryId) {\n    const data = await this.api(`/api/details/listen/category/${categoryId}`);\n    return data.data;\n  }\n\n}","map":{"version":3,"sources":["/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/client/index.js"],"names":["Client","constructor","baseUrl","api","endpoint","response","fetch","headers","ok","Error","text","json","getWatchData","data","getListenData","getFilteredWatchData","movieGenres","tvGenres","String","length","getWatchSearchResults","query","services","undefined","Object","keys","getWatchRegionServices","region","list","getListenSearchResults","getMediaOverlayData","mediaId","mediaType","toLowerCase","getWatchIMDBScore","tmdbID","rating","getTVEpisodeRatings","episodes","getWatchStreams","tmdbTitle","releaseYear","getListenYoutube","spotifyID","type","getListenCatPlaylists","categoryId"],"mappings":"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","sourcesContent":["export class Client {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n  }\n\n  async api(endpoint) {\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    if (!response.ok) {\n      throw Error(response.text);\n    } else {\n      return await response.json();\n    }\n  }\n\n  async getWatchData() {\n    const data = await this.api(\"/api/home/watch\");\n    return data;\n  }\n\n  async getListenData() {\n    const data = await this.api(\"/api/home/listen\");\n    return data;\n  }\n\n  async getFilteredWatchData(movieGenres, tvGenres) {\n    if (String(movieGenres).length === 0 && String(tvGenres).length > 0) {\n      const data = await this.api(`/api/home/watch/filtered/none/${tvGenres}`);\n      return data;\n    } else if (\n      String(tvGenres).length === 0 &&\n      String(movieGenres).length > 0\n    ) {\n      const data = await this.api(\n        `/api/home/watch/filtered/${movieGenres}/none`\n      );\n      return data;\n    } else {\n      const data = await this.api(\n        `/api/home/watch/filtered/${movieGenres}/${tvGenres}`\n      );\n      return data;\n    }\n  }\n\n  async getWatchSearchResults(query, services) {\n    if (services === undefined || Object.keys(services).length === 0) {\n      const data = await this.api(`/api/search/watch/unfiltered/${query}`);\n      return data;\n    } else {\n      const data = await this.api(\n        `/api/search/watch/filtered/${query}/${services}`\n      );\n      return data;\n    }\n  }\n\n  async getWatchRegionServices(region) {\n    const data = await this.api(`/api/search/watch/filters/${region}`);\n    return data.list;\n  }\n\n  async getListenSearchResults(query) {\n    const data = await this.api(`/api/search/listen/${query}`);\n    return data;\n  }\n\n  async getMediaOverlayData(mediaId, mediaType) {\n    const data = await this.api(\n      `/api/details/${mediaType.toLowerCase()}/${mediaId}`\n    );\n    return data.data;\n  }\n\n  async getWatchIMDBScore(tmdbID, mediaType) {\n    const data = await this.api(`/api/reviews/title/${tmdbID}/${mediaType}`);\n    return data.rating;\n  }\n\n  async getTVEpisodeRatings(tmdbID) {\n    const data = await this.api(`/api/reviews/episodes/${tmdbID}`);\n    return data.episodes;\n  }\n\n  async getWatchStreams(tmdbID, tmdbTitle, releaseYear, mediaType) {\n    const data = await this.api(\n      `/api/services/tv/${tmdbID}/${tmdbTitle}/${releaseYear}/${mediaType}`\n    );\n    return data.data;\n  }\n\n  async getListenYoutube(spotifyID, type) {\n    const data = await this.api(`/api/services/listen/${spotifyID}/${type}`);\n    return data.data;\n  }\n\n  async getListenCatPlaylists(categoryId) {\n    const data = await this.api(`/api/details/listen/category/${categoryId}`);\n    return data.data;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}