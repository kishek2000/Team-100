{"ast":null,"code":"var _jsxFileName = \"/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/view/ListenMedia.js\";\nimport React from \"react\";\nimport { ListenSet } from \"./ListenSet\";\nexport function ListenMedia({\n  category,\n  content,\n  type\n}) {\n  if (content !== undefined) {\n    const contentStart = content.slice(0, 50);\n\n    if (type === \"Podcast\" || type === \"Playlist\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"category-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"category-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 11\n        }\n      }, category), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"listen-category-media\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 11\n        }\n      }, contentStart.map((item, index) => /*#__PURE__*/React.createElement(PodcastSet, {\n        index: index,\n        imageSource: item[\"imgURL\"],\n        title: item[\"show_name\"],\n        subtext: item[\"description\"],\n        show_link: item[\"show_link\"],\n        mediaClass: \"listen-media\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 15\n        }\n      }))));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"category-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"category-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, category), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"listen-category-media\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, contentStart.map((item, index) => /*#__PURE__*/React.createElement(ListenSet, {\n      index: index,\n      imageSource: item[\"imgURL\"],\n      title: item[\"music_name\"],\n      subtext: item[\"type\"],\n      artist: item[\"artist_name\"],\n      artist_link: item[\"artist_link\"],\n      music_link: item[\"music_link\"],\n      mediaClass: \"listen-media\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }))));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 12\n      }\n    });\n  }\n}\n\nfunction PodcastSet(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"listen-set\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: props.show_link,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: props.imageSource,\n    className: props.mediaClass,\n    alt: \"music_cover\",\n    href: props.show_link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"listen-media-titles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: props.show_link,\n    target: \"_blank\",\n    className: \"listen-media-titles\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, props.title)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"listen-media-subtext\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, props.subtext));\n}","map":{"version":3,"sources":["/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/view/ListenMedia.js"],"names":["React","ListenSet","ListenMedia","category","content","type","undefined","contentStart","slice","map","item","index","PodcastSet","props","show_link","imageSource","mediaClass","title","subtext"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { ListenSet } from \"./ListenSet\";\n\nexport function ListenMedia({ category, content, type }) {\n  if (content !== undefined) {\n    const contentStart = content.slice(0, 50);\n    if (type === \"Podcast\" || type === \"Playlist\") {\n      return (\n        <div className=\"category-list\">\n          <p className=\"category-title\">{category}</p>\n          <div className=\"listen-category-media\">\n            {contentStart.map((item, index) => (\n              <PodcastSet\n                index={index}\n                imageSource={item[\"imgURL\"]}\n                title={item[\"show_name\"]}\n                subtext={item[\"description\"]}\n                show_link={item[\"show_link\"]}\n                mediaClass=\"listen-media\"\n              />\n            ))}\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"category-list\">\n        <p className=\"category-title\">{category}</p>\n        <div className=\"listen-category-media\">\n          {contentStart.map((item, index) => (\n            <ListenSet\n              index={index}\n              imageSource={item[\"imgURL\"]}\n              title={item[\"music_name\"]}\n              subtext={item[\"type\"]}\n              artist={item[\"artist_name\"]}\n              artist_link={item[\"artist_link\"]}\n              music_link={item[\"music_link\"]}\n              mediaClass=\"listen-media\"\n            />\n          ))}\n        </div>\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n}\n\nfunction PodcastSet(props) {\n  return (\n    <div className=\"listen-set\">\n      <a href={props.show_link} target=\"_blank\" rel=\"noopener noreferrer\">\n        <img\n          src={props.imageSource}\n          className={props.mediaClass}\n          alt=\"music_cover\"\n          href={props.show_link}\n        />\n      </a>\n      <p className=\"listen-media-titles\">\n        <a\n          href={props.show_link}\n          target=\"_blank\"\n          className=\"listen-media-titles\"\n          rel=\"noopener noreferrer\"\n        >\n          {props.title}\n        </a>\n      </p>\n      <p className=\"listen-media-subtext\">{props.subtext}</p>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}