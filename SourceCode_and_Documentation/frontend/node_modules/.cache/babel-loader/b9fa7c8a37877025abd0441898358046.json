{"ast":null,"code":"var _jsxFileName = \"/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/view/WatchMedia.js\";\nimport React from \"react\";\nimport { WatchMediaNav } from \"./WatchMediaNav\";\nimport { FilterWatchBar } from \"./FilterWatchBar\";\n\nfunction WatchMediaMetadata({\n  airDate,\n  language,\n  genre\n}) {\n  return [airDate, language, genre].filter(item => !!item).join(\" | \");\n}\n\nexport function WatchMedia({\n  category,\n  content,\n  getOverlayData,\n  num,\n  getOverlayServices,\n  getWatchScore,\n  getTVEpScores,\n  setMovGenresSelected,\n  setTVGenresSelected,\n  getWatchData,\n  getWatchFilteredData,\n  movieGenreOptions,\n  tvGenreOptions,\n  tvGenresSelected,\n  movGenresSelected,\n  watchCategory\n}) {\n  if (content !== undefined && content.length > 0) {\n    const contentStart = content;\n    console.log(conte);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"category-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"category-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"category-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }\n    }, category), /*#__PURE__*/React.createElement(FilterWatchBar, {\n      setMovGenresSelected: setMovGenresSelected,\n      setTVGenresSelected: setTVGenresSelected,\n      getWatchData: getWatchData,\n      getWatchFilteredData: getWatchFilteredData,\n      movieGenreOptions: movieGenreOptions,\n      tvGenreOptions: tvGenreOptions,\n      tvGenresSelected: tvGenresSelected,\n      movGenresSelected: movGenresSelected,\n      watchCategory: watchCategory,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(WatchMediaNav, {\n      num: num,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"category-media\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, contentStart.map((item, index) => item[\"id\"] !== null ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"media-template\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"media-image-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"media-user-score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"user-score-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }, Math.round(item[\"score\"] * 1000) / 10, \"%\")), /*#__PURE__*/React.createElement(\"img\", {\n      index: index,\n      src: item[\"imgURL\"],\n      className: \"media-image\",\n      alt: \"media\",\n      onClick: () => {\n        getOverlayData(item[\"id\"], item[\"type\"]);\n        getOverlayServices(item[\"id\"], item[\"name\"], item[\"first_air_date\"], item[\"type\"]);\n        getWatchScore(item[\"id\"], item[\"type\"]);\n\n        if (item[\"type\"] === \"tv\") {\n          getTVEpScores(item[\"id\"]);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"watch-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, item[\"name\"]), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"watch-metadata\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(WatchMediaMetadata, {\n      airDate: item[\"first_air_date\"],\n      language: item[\"lang\"],\n      genre: item[\"genre\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 19\n      }\n    }))) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }))));\n  } else if (content.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"no-results-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, \"Sorry! There were no \", category, \" were found.\");\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 12\n      }\n    });\n  }\n}","map":{"version":3,"sources":["/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/view/WatchMedia.js"],"names":["React","WatchMediaNav","FilterWatchBar","WatchMediaMetadata","airDate","language","genre","filter","item","join","WatchMedia","category","content","getOverlayData","num","getOverlayServices","getWatchScore","getTVEpScores","setMovGenresSelected","setTVGenresSelected","getWatchData","getWatchFilteredData","movieGenreOptions","tvGenreOptions","tvGenresSelected","movGenresSelected","watchCategory","undefined","length","contentStart","console","log","conte","map","index","Math","round"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,SAASC,kBAAT,CAA4B;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,QAAX;AAAqBC,EAAAA;AAArB,CAA5B,EAA0D;AACxD,SAAO,CAACF,OAAD,EAAUC,QAAV,EAAoBC,KAApB,EAA2BC,MAA3B,CAAmCC,IAAD,IAAU,CAAC,CAACA,IAA9C,EAAoDC,IAApD,CAAyD,KAAzD,CAAP;AACD;;AAED,OAAO,SAASC,UAAT,CAAoB;AACzBC,EAAAA,QADyB;AAEzBC,EAAAA,OAFyB;AAGzBC,EAAAA,cAHyB;AAIzBC,EAAAA,GAJyB;AAKzBC,EAAAA,kBALyB;AAMzBC,EAAAA,aANyB;AAOzBC,EAAAA,aAPyB;AAQzBC,EAAAA,oBARyB;AASzBC,EAAAA,mBATyB;AAUzBC,EAAAA,YAVyB;AAWzBC,EAAAA,oBAXyB;AAYzBC,EAAAA,iBAZyB;AAazBC,EAAAA,cAbyB;AAczBC,EAAAA,gBAdyB;AAezBC,EAAAA,iBAfyB;AAgBzBC,EAAAA;AAhByB,CAApB,EAiBJ;AACD,MAAId,OAAO,KAAKe,SAAZ,IAAyBf,OAAO,CAACgB,MAAR,GAAiB,CAA9C,EAAiD;AAC/C,UAAMC,YAAY,GAAGjB,OAArB;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+BrB,QAA/B,CADF,eAEE,oBAAC,cAAD;AACE,MAAA,oBAAoB,EAAEO,oBADxB;AAEE,MAAA,mBAAmB,EAAEC,mBAFvB;AAGE,MAAA,YAAY,EAAEC,YAHhB;AAIE,MAAA,oBAAoB,EAAEC,oBAJxB;AAKE,MAAA,iBAAiB,EAAEC,iBALrB;AAME,MAAA,cAAc,EAAEC,cANlB;AAOE,MAAA,gBAAgB,EAAEC,gBAPpB;AAQE,MAAA,iBAAiB,EAAEC,iBARrB;AASE,MAAA,aAAa,EAAEC,aATjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,eAeE,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAEZ,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,eAgBE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGe,YAAY,CAACI,GAAb,CAAiB,CAACzB,IAAD,EAAO0B,KAAP,KAChB1B,IAAI,CAAC,IAAD,CAAJ,KAAe,IAAf,gBACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAgC,MAAA,GAAG,EAAE0B,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,IAAI,CAACC,KAAL,CAAW5B,IAAI,CAAC,OAAD,CAAJ,GAAgB,IAA3B,IAAmC,EADtC,MADF,CADF,eAME;AACE,MAAA,KAAK,EAAE0B,KADT;AAEE,MAAA,GAAG,EAAE1B,IAAI,CAAC,QAAD,CAFX;AAGE,MAAA,SAAS,EAAC,aAHZ;AAIE,MAAA,GAAG,EAAC,OAJN;AAKE,MAAA,OAAO,EAAE,MAAM;AACbK,QAAAA,cAAc,CAACL,IAAI,CAAC,IAAD,CAAL,EAAaA,IAAI,CAAC,MAAD,CAAjB,CAAd;AACAO,QAAAA,kBAAkB,CAChBP,IAAI,CAAC,IAAD,CADY,EAEhBA,IAAI,CAAC,MAAD,CAFY,EAGhBA,IAAI,CAAC,gBAAD,CAHY,EAIhBA,IAAI,CAAC,MAAD,CAJY,CAAlB;AAMAQ,QAAAA,aAAa,CAACR,IAAI,CAAC,IAAD,CAAL,EAAaA,IAAI,CAAC,MAAD,CAAjB,CAAb;;AACA,YAAIA,IAAI,CAAC,MAAD,CAAJ,KAAiB,IAArB,EAA2B;AACzBS,UAAAA,aAAa,CAACT,IAAI,CAAC,IAAD,CAAL,CAAb;AACD;AACF,OAjBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF,eA2BE;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BA,IAAI,CAAC,MAAD,CAAhC,CA3BF,eA4BE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,kBAAD;AACE,MAAA,OAAO,EAAEA,IAAI,CAAC,gBAAD,CADf;AAEE,MAAA,QAAQ,EAAEA,IAAI,CAAC,MAAD,CAFhB;AAGE,MAAA,KAAK,EAAEA,IAAI,CAAC,OAAD,CAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA5BF,CADF,gBAsCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvCH,CADH,CAhBF,CADF;AA+DD,GAnED,MAmEO,IAAII,OAAO,CAACgB,MAAR,KAAmB,CAAvB,EAA0B;AAC/B,wBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCACwBjB,QADxB,iBADF;AAKD,GANM,MAMA;AACL,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AACF","sourcesContent":["import React from \"react\";\nimport { WatchMediaNav } from \"./WatchMediaNav\";\nimport { FilterWatchBar } from \"./FilterWatchBar\";\n\nfunction WatchMediaMetadata({ airDate, language, genre }) {\n  return [airDate, language, genre].filter((item) => !!item).join(\" | \");\n}\n\nexport function WatchMedia({\n  category,\n  content,\n  getOverlayData,\n  num,\n  getOverlayServices,\n  getWatchScore,\n  getTVEpScores,\n  setMovGenresSelected,\n  setTVGenresSelected,\n  getWatchData,\n  getWatchFilteredData,\n  movieGenreOptions,\n  tvGenreOptions,\n  tvGenresSelected,\n  movGenresSelected,\n  watchCategory,\n}) {\n  if (content !== undefined && content.length > 0) {\n    const contentStart = content;\n    console.log(conte);\n\n    return (\n      <div className=\"category-list\">\n        <div className=\"category-header\">\n          <p className=\"category-title\">{category}</p>\n          <FilterWatchBar\n            setMovGenresSelected={setMovGenresSelected}\n            setTVGenresSelected={setTVGenresSelected}\n            getWatchData={getWatchData}\n            getWatchFilteredData={getWatchFilteredData}\n            movieGenreOptions={movieGenreOptions}\n            tvGenreOptions={tvGenreOptions}\n            tvGenresSelected={tvGenresSelected}\n            movGenresSelected={movGenresSelected}\n            watchCategory={watchCategory}\n          />\n        </div>\n        <WatchMediaNav num={num} />\n        <div className=\"category-media\">\n          {contentStart.map((item, index) =>\n            item[\"id\"] !== null ? (\n              <div className=\"media-template\" key={index}>\n                <div className=\"media-image-wrapper\">\n                  <div className=\"media-user-score\">\n                    <span className=\"user-score-text\">\n                      {Math.round(item[\"score\"] * 1000) / 10}%\n                    </span>\n                  </div>\n                  <img\n                    index={index}\n                    src={item[\"imgURL\"]}\n                    className=\"media-image\"\n                    alt=\"media\"\n                    onClick={() => {\n                      getOverlayData(item[\"id\"], item[\"type\"]);\n                      getOverlayServices(\n                        item[\"id\"],\n                        item[\"name\"],\n                        item[\"first_air_date\"],\n                        item[\"type\"]\n                      );\n                      getWatchScore(item[\"id\"], item[\"type\"]);\n                      if (item[\"type\"] === \"tv\") {\n                        getTVEpScores(item[\"id\"]);\n                      }\n                    }}\n                  />\n                </div>\n                <p className=\"watch-title\">{item[\"name\"]}</p>\n                <div className=\"watch-metadata\">\n                  <WatchMediaMetadata\n                    airDate={item[\"first_air_date\"]}\n                    language={item[\"lang\"]}\n                    genre={item[\"genre\"]}\n                  />\n                </div>\n              </div>\n            ) : (\n              <div></div>\n            )\n          )}\n        </div>\n      </div>\n    );\n  } else if (content.length === 0) {\n    return (\n      <div className=\"no-results-title\">\n        Sorry! There were no {category} were found.\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}