{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport { Client } from \"../client\";\nimport { AUSTREAMS } from \"../constants/index\"; // Instantiate a single instance of the Client, used across\n// the application for fetching of data.\n\nconst client = new Client(\"http://127.0.0.1:8000\");\nexport function AppContainer({\n  children\n}) {\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\n  const [watchData, setWatchData] = useState({});\n  const [listenData, setListenData] = useState({});\n  const [searchQuery, setSearchQuery] = useState({});\n  const [serviceSelections, setServiceSelections] = useState({});\n  const [serviceOptions, setServiceOptions] = useState(AUSTREAMS);\n  const [region, setRegion] = useState(\"AU\");\n  const [openOverlayID, setOpenOverlayID] = useState(-1);\n  const [overlayData, setOverlayData] = useState({});\n  const [overlayServices, setOverlayServices] = useState({});\n  const [overlayReview, setOverlayReview] = useState({});\n  const [overlayEpisodeReviews, setOverlayEpisodeReviews] = useState({});\n  const [listenYTLink, setListenYTLink] = useState({});\n  const [listenCategoryData, setListenCategoryData] = useState({});\n  const [selectedCat, setSelectedCat] = useState({});\n  const getListenCatPlaylist = useCallback(categoryID => {\n    client.getListenCatPlaylists(categoryID).then(data => setListenCategoryData(data));\n  }, [setListenCategoryData]);\n  const getWatchData = useCallback(() => {\n    client.getWatchData().then(data => setWatchData(data));\n  }, [setWatchData]);\n  const getListenData = useCallback(() => {\n    client.getListenData().then(data => setListenData(data));\n  }, [setListenData]);\n  const getOverlayServices = useCallback((tmdbID, tmdbTitle, tmdbPopularity, tmdbScore) => {\n    client.getWatchStreams(tmdbID, tmdbTitle, tmdbPopularity, tmdbScore).then(data => setOverlayServices(data));\n  }, [setOverlayServices]);\n  const getServiceOptions = useCallback(regionInput => {\n    client.getWatchRegionServices(regionInput).then(data => {\n      setServiceOptions(data);\n    });\n  }, [setServiceOptions]);\n  const onSearchQuery = useCallback((query, experience, services) => {\n    if (experience === \"WATCH\") {\n      client.getWatchSearchResults(query, services).then(data => {\n        setWatchData(data);\n        setSearchQuery(query);\n      });\n    } else if (experience === \"LISTEN\") {\n      client.getListenSearchResults(query).then(data => {\n        setListenData(data);\n        setSearchQuery(query);\n      });\n    }\n  }, [setSearchQuery, setWatchData, setListenData]);\n  const getWatchScore = useCallback((tmdbID, mediaType) => {\n    client.getWatchIMDBScore(tmdbID, mediaType).then(data => {\n      setOverlayReview(data);\n    });\n  }, [setOverlayReview]);\n  const getTVEpScores = useCallback(tmdbID => {\n    client.getTVEpisodeRatings(tmdbID).then(data => {\n      setOverlayEpisodeReviews(data);\n    });\n  }, [setOverlayEpisodeReviews]);\n  const getOverlayData = useCallback((mediaId, mediaType) => {\n    setOpenOverlayID(mediaId);\n    client.getMediaOverlayData(mediaId, mediaType).then(data => {\n      setOverlayData(data);\n    });\n  }, [setOverlayData]);\n  const getListenLink = useCallback((spotifyID, listenType) => {\n    client.getListenYoutube(spotifyID, listenType).then(data => {\n      setListenYTLink(data);\n    });\n  }, [setListenYTLink]);\n  useEffect(() => {\n    if (mediaSelected === \"WATCH\") {\n      getWatchData();\n    } else {\n      getListenData();\n    }\n  }, [mediaSelected, getWatchData, getListenData]);\n  return children({\n    mediaSelected: mediaSelected,\n    onMediaChange: setMediaSelected,\n    onSearchQuery: onSearchQuery,\n    getWatchData: getWatchData,\n    getListenData: getListenData,\n    getOverlayData: getOverlayData,\n    getServiceOptions: getServiceOptions,\n    watch: {\n      data: watchData,\n      fetch: getWatchData\n    },\n    listen: {\n      data: listenData,\n      fetch: getListenData\n    },\n    overlay: {\n      data: overlayData\n    },\n    setOverlayData: setOverlayData,\n    setSearchQuery: setSearchQuery,\n    searchQuery: searchQuery,\n    openOverlayID: openOverlayID,\n    setOpenOverlayID: setOpenOverlayID,\n    setServiceOptions: setServiceOptions,\n    serviceOptions: serviceOptions,\n    serviceSelections: serviceSelections,\n    setServiceSelections: setServiceSelections,\n    region: region,\n    setRegion: setRegion,\n    getOverlayServices: getOverlayServices,\n    overlayServices: overlayServices,\n    setOverlayServices: setOverlayServices,\n    overlayReview: overlayReview,\n    overlayEpisodeReviews: overlayEpisodeReviews,\n    getWatchScore: getWatchScore,\n    getTVEpScores: getTVEpScores,\n    setOverlayReview: setOverlayReview,\n    setOverlayEpisodeReviews: setOverlayEpisodeReviews,\n    listenYTLink: listenYTLink,\n    getListenLink: getListenLink,\n    setListenYTLink: setListenYTLink,\n    listenCategoryData: listenCategoryData,\n    setListenCategoryData: setListenCategoryData,\n    getListenCatPlaylist: getListenCatPlaylist,\n    selectedCat: selectedCat,\n    setSelectedCat: setSelectedCat\n  });\n}","map":{"version":3,"sources":["/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/state/index.js"],"names":["useState","useEffect","useCallback","Client","AUSTREAMS","client","AppContainer","children","mediaSelected","setMediaSelected","watchData","setWatchData","listenData","setListenData","searchQuery","setSearchQuery","serviceSelections","setServiceSelections","serviceOptions","setServiceOptions","region","setRegion","openOverlayID","setOpenOverlayID","overlayData","setOverlayData","overlayServices","setOverlayServices","overlayReview","setOverlayReview","overlayEpisodeReviews","setOverlayEpisodeReviews","listenYTLink","setListenYTLink","listenCategoryData","setListenCategoryData","selectedCat","setSelectedCat","getListenCatPlaylist","categoryID","getListenCatPlaylists","then","data","getWatchData","getListenData","getOverlayServices","tmdbID","tmdbTitle","tmdbPopularity","tmdbScore","getWatchStreams","getServiceOptions","regionInput","getWatchRegionServices","onSearchQuery","query","experience","services","getWatchSearchResults","getListenSearchResults","getWatchScore","mediaType","getWatchIMDBScore","getTVEpScores","getTVEpisodeRatings","getOverlayData","mediaId","getMediaOverlayData","getListenLink","spotifyID","listenType","getListenYoutube","onMediaChange","watch","fetch","listen","overlay"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { Client } from \"../client\";\nimport { AUSTREAMS } from \"../constants/index\";\n\n// Instantiate a single instance of the Client, used across\n// the application for fetching of data.\nconst client = new Client(\"http://127.0.0.1:8000\");\n\nexport function AppContainer({ children }) {\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\n  const [watchData, setWatchData] = useState({});\n  const [listenData, setListenData] = useState({});\n  const [searchQuery, setSearchQuery] = useState({});\n  const [serviceSelections, setServiceSelections] = useState({});\n  const [serviceOptions, setServiceOptions] = useState(AUSTREAMS);\n  const [region, setRegion] = useState(\"AU\");\n  const [openOverlayID, setOpenOverlayID] = useState(-1);\n  const [overlayData, setOverlayData] = useState({});\n  const [overlayServices, setOverlayServices] = useState({});\n  const [overlayReview, setOverlayReview] = useState({});\n  const [overlayEpisodeReviews, setOverlayEpisodeReviews] = useState({});\n  const [listenYTLink, setListenYTLink] = useState({});\n  const [listenCategoryData, setListenCategoryData] = useState({});\n  const [selectedCat, setSelectedCat] = useState({});\n\n  const getListenCatPlaylist = useCallback(\n    (categoryID) => {\n      client\n        .getListenCatPlaylists(categoryID)\n        .then((data) => setListenCategoryData(data));\n    },\n    [setListenCategoryData]\n  );\n\n  const getWatchData = useCallback(() => {\n    client.getWatchData().then((data) => setWatchData(data));\n  }, [setWatchData]);\n\n  const getListenData = useCallback(() => {\n    client.getListenData().then((data) => setListenData(data));\n  }, [setListenData]);\n\n  const getOverlayServices = useCallback(\n    (tmdbID, tmdbTitle, tmdbPopularity, tmdbScore) => {\n      client\n        .getWatchStreams(tmdbID, tmdbTitle, tmdbPopularity, tmdbScore)\n        .then((data) => setOverlayServices(data));\n    },\n    [setOverlayServices]\n  );\n\n  const getServiceOptions = useCallback(\n    (regionInput) => {\n      client.getWatchRegionServices(regionInput).then((data) => {\n        setServiceOptions(data);\n      });\n    },\n    [setServiceOptions]\n  );\n\n  const onSearchQuery = useCallback(\n    (query, experience, services) => {\n      if (experience === \"WATCH\") {\n        client.getWatchSearchResults(query, services).then((data) => {\n          setWatchData(data);\n          setSearchQuery(query);\n        });\n      } else if (experience === \"LISTEN\") {\n        client.getListenSearchResults(query).then((data) => {\n          setListenData(data);\n          setSearchQuery(query);\n        });\n      }\n    },\n    [setSearchQuery, setWatchData, setListenData]\n  );\n\n  const getWatchScore = useCallback(\n    (tmdbID, mediaType) => {\n      client.getWatchIMDBScore(tmdbID, mediaType).then((data) => {\n        setOverlayReview(data);\n      });\n    },\n    [setOverlayReview]\n  );\n\n  const getTVEpScores = useCallback(\n    (tmdbID) => {\n      client.getTVEpisodeRatings(tmdbID).then((data) => {\n        setOverlayEpisodeReviews(data);\n      });\n    },\n    [setOverlayEpisodeReviews]\n  );\n\n  const getOverlayData = useCallback(\n    (mediaId, mediaType) => {\n      setOpenOverlayID(mediaId);\n      client.getMediaOverlayData(mediaId, mediaType).then((data) => {\n        setOverlayData(data);\n      });\n    },\n    [setOverlayData]\n  );\n\n  const getListenLink = useCallback(\n    (spotifyID, listenType) => {\n      client.getListenYoutube(spotifyID, listenType).then((data) => {\n        setListenYTLink(data);\n      });\n    },\n    [setListenYTLink]\n  );\n\n  useEffect(() => {\n    if (mediaSelected === \"WATCH\") {\n      getWatchData();\n    } else {\n      getListenData();\n    }\n  }, [mediaSelected, getWatchData, getListenData]);\n\n  return children({\n    mediaSelected: mediaSelected,\n    onMediaChange: setMediaSelected,\n    onSearchQuery: onSearchQuery,\n    getWatchData: getWatchData,\n    getListenData: getListenData,\n    getOverlayData: getOverlayData,\n    getServiceOptions: getServiceOptions,\n    watch: { data: watchData, fetch: getWatchData },\n    listen: { data: listenData, fetch: getListenData },\n    overlay: { data: overlayData },\n    setOverlayData: setOverlayData,\n    setSearchQuery: setSearchQuery,\n    searchQuery: searchQuery,\n    openOverlayID: openOverlayID,\n    setOpenOverlayID: setOpenOverlayID,\n    setServiceOptions: setServiceOptions,\n    serviceOptions: serviceOptions,\n    serviceSelections: serviceSelections,\n    setServiceSelections: setServiceSelections,\n    region: region,\n    setRegion: setRegion,\n    getOverlayServices: getOverlayServices,\n    overlayServices: overlayServices,\n    setOverlayServices: setOverlayServices,\n    overlayReview: overlayReview,\n    overlayEpisodeReviews: overlayEpisodeReviews,\n    getWatchScore: getWatchScore,\n    getTVEpScores: getTVEpScores,\n    setOverlayReview: setOverlayReview,\n    setOverlayEpisodeReviews: setOverlayEpisodeReviews,\n    listenYTLink: listenYTLink,\n    getListenLink: getListenLink,\n    setListenYTLink: setListenYTLink,\n    listenCategoryData: listenCategoryData,\n    setListenCategoryData: setListenCategoryData,\n    getListenCatPlaylist: getListenCatPlaylist,\n    selectedCat: selectedCat,\n    setSelectedCat: setSelectedCat,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}