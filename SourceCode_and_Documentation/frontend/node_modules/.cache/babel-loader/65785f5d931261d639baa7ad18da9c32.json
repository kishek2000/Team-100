{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport { Client } from \"../client\";\nimport { AUSTREAMS } from \"../constants/index\"; // Instantiate a single instance of the Client, used across\n// the application for fetching of data.\n\nconst client = new Client(\"http://127.0.0.1:8000\");\nexport function AppContainer({\n  children\n}) {\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\n  const [filterSelected, setFilterSelected] = useState({\n    value: \"home\",\n    label: \"Home\"\n  });\n  const [watchData, setWatchData] = useState({});\n  const [listenData, setListenData] = useState({});\n  const [searchQuery, setSearchQuery] = useState({});\n  const [serviceSelections, setServiceSelections] = useState({});\n  const [serviceOptions, setServiceOptions] = useState(AUSTREAMS);\n  const [region, setRegion] = useState(\"AU\");\n  const [openOverlayID, setOpenOverlayID] = useState(-1);\n  const [overlayData, setOverlayData] = useState({});\n  const [overlayServices, setOverlayServices] = useState({});\n  const [overlayReview, setOverlayReview] = useState({});\n  const [overlayEpisodeReviews, setOverlayEpisodeReviews] = useState({});\n  const [listenYTLink, setListenYTLink] = useState({});\n  const [listenCategoryData, setListenCategoryData] = useState({});\n  const [selectedCat, setSelectedCat] = useState({\n    value: \"toplists\",\n    label: \"Top Lists\"\n  });\n  const getListenCatPlaylist = useCallback(categoryID => {\n    client.getListenCatPlaylists(categoryID).then(data => setListenCategoryData(data));\n  }, [setListenCategoryData]);\n  const getWatchData = useCallback(() => {\n    client.getWatchData().then(data => setWatchData(data));\n  }, [setWatchData]);\n  const getListenData = useCallback(() => {\n    client.getListenData().then(data => setListenData(data));\n  }, [setListenData]);\n  const getWatchFilteredData = useCallback((movieGenres, tvGenres) => {\n    client.getWatchFilteredData(movieGenres, tvGenres).then(data => setWatchData(data));\n  }, [setWatchData]);\n  const getOverlayServices = useCallback((tmdbID, tmdbTitle, releaseYear, mediaType) => {\n    client.getWatchStreams(tmdbID, tmdbTitle, releaseYear, mediaType).then(data => setOverlayServices(data));\n  }, [setOverlayServices]);\n  const getServiceOptions = useCallback(regionInput => {\n    client.getWatchRegionServices(regionInput).then(data => {\n      setServiceOptions(data);\n    });\n  }, [setServiceOptions]);\n  const onSearchQuery = useCallback((query, experience, services) => {\n    if (experience === \"WATCH\") {\n      client.getWatchSearchResults(query, services).then(data => {\n        setWatchData(data);\n        setSearchQuery(query);\n      });\n    } else if (experience === \"LISTEN\") {\n      client.getListenSearchResults(query).then(data => {\n        setListenData(data);\n        setSearchQuery(query);\n      });\n    }\n  }, [setSearchQuery, setWatchData, setListenData]);\n  const getWatchScore = useCallback((tmdbID, mediaType) => {\n    client.getWatchIMDBScore(tmdbID, mediaType).then(data => {\n      setOverlayReview(data);\n    });\n  }, [setOverlayReview]);\n  const getTVEpScores = useCallback(tmdbID => {\n    client.getTVEpisodeRatings(tmdbID).then(data => {\n      setOverlayEpisodeReviews(data);\n    });\n  }, [setOverlayEpisodeReviews]);\n  const getOverlayData = useCallback((mediaId, mediaType) => {\n    setOpenOverlayID(mediaId);\n    client.getMediaOverlayData(mediaId, mediaType).then(data => {\n      setOverlayData(data);\n    });\n  }, [setOverlayData]);\n  const getListenLink = useCallback((spotifyID, listenType) => {\n    client.getListenYoutube(spotifyID, listenType).then(data => {\n      setListenYTLink(data);\n    });\n  }, [setListenYTLink]);\n  useEffect(() => {\n    if (mediaSelected === \"WATCH\") {\n      getWatchData();\n    } else {\n      getListenData();\n    }\n  }, [mediaSelected, getWatchData, getListenData]);\n  return children({\n    mediaSelected: mediaSelected,\n    onMediaChange: setMediaSelected,\n    onSearchQuery: onSearchQuery,\n    getWatchData: getWatchData,\n    getWatchFilteredData: getWatchFilteredData,\n    getListenData: getListenData,\n    getOverlayData: getOverlayData,\n    getServiceOptions: getServiceOptions,\n    watch: {\n      data: watchData\n    },\n    listen: {\n      data: listenData\n    },\n    overlay: {\n      data: overlayData\n    },\n    setOverlayData: setOverlayData,\n    setSearchQuery: setSearchQuery,\n    searchQuery: searchQuery,\n    openOverlayID: openOverlayID,\n    setOpenOverlayID: setOpenOverlayID,\n    setServiceOptions: setServiceOptions,\n    serviceOptions: serviceOptions,\n    serviceSelections: serviceSelections,\n    setServiceSelections: setServiceSelections,\n    region: region,\n    setRegion: setRegion,\n    getOverlayServices: getOverlayServices,\n    overlayServices: overlayServices,\n    setOverlayServices: setOverlayServices,\n    overlayReview: overlayReview,\n    overlayEpisodeReviews: overlayEpisodeReviews,\n    getWatchScore: getWatchScore,\n    getTVEpScores: getTVEpScores,\n    setOverlayReview: setOverlayReview,\n    setOverlayEpisodeReviews: setOverlayEpisodeReviews,\n    listenYTLink: listenYTLink,\n    getListenLink: getListenLink,\n    setListenYTLink: setListenYTLink,\n    listenCategoryData: listenCategoryData,\n    setListenCategoryData: setListenCategoryData,\n    getListenCatPlaylist: getListenCatPlaylist,\n    selectedCat: selectedCat,\n    setSelectedCat: setSelectedCat,\n    filterSelected: filterSelected,\n    setFilterSelected: setFilterSelected\n  });\n}","map":{"version":3,"sources":["/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/state/index.js"],"names":["useState","useEffect","useCallback","Client","AUSTREAMS","client","AppContainer","children","mediaSelected","setMediaSelected","filterSelected","setFilterSelected","value","label","watchData","setWatchData","listenData","setListenData","searchQuery","setSearchQuery","serviceSelections","setServiceSelections","serviceOptions","setServiceOptions","region","setRegion","openOverlayID","setOpenOverlayID","overlayData","setOverlayData","overlayServices","setOverlayServices","overlayReview","setOverlayReview","overlayEpisodeReviews","setOverlayEpisodeReviews","listenYTLink","setListenYTLink","listenCategoryData","setListenCategoryData","selectedCat","setSelectedCat","getListenCatPlaylist","categoryID","getListenCatPlaylists","then","data","getWatchData","getListenData","getWatchFilteredData","movieGenres","tvGenres","getOverlayServices","tmdbID","tmdbTitle","releaseYear","mediaType","getWatchStreams","getServiceOptions","regionInput","getWatchRegionServices","onSearchQuery","query","experience","services","getWatchSearchResults","getListenSearchResults","getWatchScore","getWatchIMDBScore","getTVEpScores","getTVEpisodeRatings","getOverlayData","mediaId","getMediaOverlayData","getListenLink","spotifyID","listenType","getListenYoutube","onMediaChange","watch","listen","overlay"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { Client } from \"../client\";\nimport { AUSTREAMS } from \"../constants/index\";\n\n// Instantiate a single instance of the Client, used across\n// the application for fetching of data.\nconst client = new Client(\"http://127.0.0.1:8000\");\n\nexport function AppContainer({ children }) {\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\n  const [filterSelected, setFilterSelected] = useState({\n    value: \"home\",\n    label: \"Home\",\n  });\n  const [watchData, setWatchData] = useState({});\n  const [listenData, setListenData] = useState({});\n  const [searchQuery, setSearchQuery] = useState({});\n  const [serviceSelections, setServiceSelections] = useState({});\n  const [serviceOptions, setServiceOptions] = useState(AUSTREAMS);\n  const [region, setRegion] = useState(\"AU\");\n  const [openOverlayID, setOpenOverlayID] = useState(-1);\n  const [overlayData, setOverlayData] = useState({});\n  const [overlayServices, setOverlayServices] = useState({});\n  const [overlayReview, setOverlayReview] = useState({});\n  const [overlayEpisodeReviews, setOverlayEpisodeReviews] = useState({});\n  const [listenYTLink, setListenYTLink] = useState({});\n  const [listenCategoryData, setListenCategoryData] = useState({});\n  const [selectedCat, setSelectedCat] = useState({\n    value: \"toplists\",\n    label: \"Top Lists\",\n  });\n\n  const getListenCatPlaylist = useCallback(\n    (categoryID) => {\n      client\n        .getListenCatPlaylists(categoryID)\n        .then((data) => setListenCategoryData(data));\n    },\n    [setListenCategoryData]\n  );\n\n  const getWatchData = useCallback(() => {\n    client.getWatchData().then((data) => setWatchData(data));\n  }, [setWatchData]);\n\n  const getListenData = useCallback(() => {\n    client.getListenData().then((data) => setListenData(data));\n  }, [setListenData]);\n\n  const getWatchFilteredData = useCallback(\n    (movieGenres, tvGenres) => {\n      client\n        .getWatchFilteredData(movieGenres, tvGenres)\n        .then((data) => setWatchData(data));\n    },\n    [setWatchData]\n  );\n\n  const getOverlayServices = useCallback(\n    (tmdbID, tmdbTitle, releaseYear, mediaType) => {\n      client\n        .getWatchStreams(tmdbID, tmdbTitle, releaseYear, mediaType)\n        .then((data) => setOverlayServices(data));\n    },\n    [setOverlayServices]\n  );\n\n  const getServiceOptions = useCallback(\n    (regionInput) => {\n      client.getWatchRegionServices(regionInput).then((data) => {\n        setServiceOptions(data);\n      });\n    },\n    [setServiceOptions]\n  );\n\n  const onSearchQuery = useCallback(\n    (query, experience, services) => {\n      if (experience === \"WATCH\") {\n        client.getWatchSearchResults(query, services).then((data) => {\n          setWatchData(data);\n          setSearchQuery(query);\n        });\n      } else if (experience === \"LISTEN\") {\n        client.getListenSearchResults(query).then((data) => {\n          setListenData(data);\n          setSearchQuery(query);\n        });\n      }\n    },\n    [setSearchQuery, setWatchData, setListenData]\n  );\n\n  const getWatchScore = useCallback(\n    (tmdbID, mediaType) => {\n      client.getWatchIMDBScore(tmdbID, mediaType).then((data) => {\n        setOverlayReview(data);\n      });\n    },\n    [setOverlayReview]\n  );\n\n  const getTVEpScores = useCallback(\n    (tmdbID) => {\n      client.getTVEpisodeRatings(tmdbID).then((data) => {\n        setOverlayEpisodeReviews(data);\n      });\n    },\n    [setOverlayEpisodeReviews]\n  );\n\n  const getOverlayData = useCallback(\n    (mediaId, mediaType) => {\n      setOpenOverlayID(mediaId);\n      client.getMediaOverlayData(mediaId, mediaType).then((data) => {\n        setOverlayData(data);\n      });\n    },\n    [setOverlayData]\n  );\n\n  const getListenLink = useCallback(\n    (spotifyID, listenType) => {\n      client.getListenYoutube(spotifyID, listenType).then((data) => {\n        setListenYTLink(data);\n      });\n    },\n    [setListenYTLink]\n  );\n\n  useEffect(() => {\n    if (mediaSelected === \"WATCH\") {\n      getWatchData();\n    } else {\n      getListenData();\n    }\n  }, [mediaSelected, getWatchData, getListenData]);\n\n  return children({\n    mediaSelected: mediaSelected,\n    onMediaChange: setMediaSelected,\n    onSearchQuery: onSearchQuery,\n    getWatchData: getWatchData,\n    getWatchFilteredData: getWatchFilteredData,\n    getListenData: getListenData,\n    getOverlayData: getOverlayData,\n    getServiceOptions: getServiceOptions,\n    watch: { data: watchData },\n    listen: { data: listenData },\n    overlay: { data: overlayData },\n    setOverlayData: setOverlayData,\n    setSearchQuery: setSearchQuery,\n    searchQuery: searchQuery,\n    openOverlayID: openOverlayID,\n    setOpenOverlayID: setOpenOverlayID,\n    setServiceOptions: setServiceOptions,\n    serviceOptions: serviceOptions,\n    serviceSelections: serviceSelections,\n    setServiceSelections: setServiceSelections,\n    region: region,\n    setRegion: setRegion,\n    getOverlayServices: getOverlayServices,\n    overlayServices: overlayServices,\n    setOverlayServices: setOverlayServices,\n    overlayReview: overlayReview,\n    overlayEpisodeReviews: overlayEpisodeReviews,\n    getWatchScore: getWatchScore,\n    getTVEpScores: getTVEpScores,\n    setOverlayReview: setOverlayReview,\n    setOverlayEpisodeReviews: setOverlayEpisodeReviews,\n    listenYTLink: listenYTLink,\n    getListenLink: getListenLink,\n    setListenYTLink: setListenYTLink,\n    listenCategoryData: listenCategoryData,\n    setListenCategoryData: setListenCategoryData,\n    getListenCatPlaylist: getListenCatPlaylist,\n    selectedCat: selectedCat,\n    setSelectedCat: setSelectedCat,\n    filterSelected: filterSelected,\n    setFilterSelected: setFilterSelected,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}