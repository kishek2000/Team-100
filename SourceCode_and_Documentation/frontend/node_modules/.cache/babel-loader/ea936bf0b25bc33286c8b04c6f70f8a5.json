{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport { Client } from \"../client\";\nimport { AUSTREAMS } from \"../constants/index\"; // Instantiate a single instance of the Client, used across\n// the application for fetching of data.\n\nconst client = new Client(\"http://127.0.0.1:8000\");\nexport function AppContainer({\n  children\n}) {\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\n  const [filterSelected, setFilterSelected] = useState(\"home\");\n  const [movGenresSelected, setMovGenresSelected] = useState({});\n  const [tvGenresSelected, setTVGenresSelected] = useState({});\n  const [watchData, setWatchData] = useState({});\n  const [listenData, setListenData] = useState({});\n  const [searchQuery, setSearchQuery] = useState({});\n  const [serviceSelections, setServiceSelections] = useState({});\n  const [serviceOptions, setServiceOptions] = useState(AUSTREAMS);\n  const [region, setRegion] = useState(\"AU\");\n  const [openOverlayID, setOpenOverlayID] = useState(-1);\n  const [overlayData, setOverlayData] = useState({});\n  const [overlayServices, setOverlayServices] = useState({});\n  const [overlayReview, setOverlayReview] = useState({});\n  const [overlayEpisodeReviews, setOverlayEpisodeReviews] = useState({});\n  const [listenYTLink, setListenYTLink] = useState({});\n  const [listenCategoryData, setListenCategoryData] = useState({});\n  const [selectedCat, setSelectedCat] = useState({\n    value: \"toplists\",\n    label: \"Top Lists\"\n  });\n  const getListenCatPlaylist = useCallback(categoryID => {\n    client.getListenCatPlaylists(categoryID).then(data => setListenCategoryData(data));\n  }, [setListenCategoryData]);\n  const getWatchData = useCallback(() => {\n    client.getWatchData().then(data => setWatchData(data));\n  }, [setWatchData]);\n  const getListenData = useCallback(() => {\n    client.getListenData().then(data => setListenData(data));\n  }, [setListenData]);\n  const getWatchFilteredData = useCallback((movieGenres, tvGenres) => {\n    client.getWatchFilteredData(movieGenres, tvGenres).then(data => setWatchData(data));\n  }, [setWatchData]);\n  const getOverlayServices = useCallback((tmdbID, tmdbTitle, releaseYear, mediaType) => {\n    client.getWatchStreams(tmdbID, tmdbTitle, releaseYear, mediaType).then(data => setOverlayServices(data));\n  }, [setOverlayServices]);\n  const getServiceOptions = useCallback(regionInput => {\n    client.getWatchRegionServices(regionInput).then(data => {\n      setServiceOptions(data);\n    });\n  }, [setServiceOptions]);\n  const onSearchQuery = useCallback((query, experience, services) => {\n    if (experience === \"WATCH\") {\n      client.getWatchSearchResults(query, services).then(data => {\n        setWatchData(data);\n        setSearchQuery(query);\n      });\n    } else if (experience === \"LISTEN\") {\n      client.getListenSearchResults(query).then(data => {\n        setListenData(data);\n        setSearchQuery(query);\n      });\n    }\n  }, [setSearchQuery, setWatchData, setListenData]);\n  const getWatchScore = useCallback((tmdbID, mediaType) => {\n    client.getWatchIMDBScore(tmdbID, mediaType).then(data => {\n      setOverlayReview(data);\n    });\n  }, [setOverlayReview]);\n  const getTVEpScores = useCallback(tmdbID => {\n    client.getTVEpisodeRatings(tmdbID).then(data => {\n      setOverlayEpisodeReviews(data);\n    });\n  }, [setOverlayEpisodeReviews]);\n  const getOverlayData = useCallback((mediaId, mediaType) => {\n    setOpenOverlayID(mediaId);\n    client.getMediaOverlayData(mediaId, mediaType).then(data => {\n      setOverlayData(data);\n    });\n  }, [setOverlayData]);\n  const getListenLink = useCallback((spotifyID, listenType) => {\n    client.getListenYoutube(spotifyID, listenType).then(data => {\n      setListenYTLink(data);\n    });\n  }, [setListenYTLink]);\n  useEffect(() => {\n    if (mediaSelected === \"WATCH\") {\n      getWatchData();\n    } else {\n      getListenData();\n    }\n  }, [mediaSelected, getWatchData, getListenData]);\n  return children({\n    mediaSelected: mediaSelected,\n    onMediaChange: setMediaSelected,\n    onSearchQuery: onSearchQuery,\n    getWatchData: getWatchData,\n    getWatchFilteredData: getWatchFilteredData,\n    getListenData: getListenData,\n    getOverlayData: getOverlayData,\n    getServiceOptions: getServiceOptions,\n    watch: {\n      data: watchData\n    },\n    listen: {\n      data: listenData\n    },\n    overlay: {\n      data: overlayData\n    },\n    setOverlayData: setOverlayData,\n    setSearchQuery: setSearchQuery,\n    searchQuery: searchQuery,\n    openOverlayID: openOverlayID,\n    setOpenOverlayID: setOpenOverlayID,\n    setServiceOptions: setServiceOptions,\n    serviceOptions: serviceOptions,\n    serviceSelections: serviceSelections,\n    setServiceSelections: setServiceSelections,\n    region: region,\n    setRegion: setRegion,\n    getOverlayServices: getOverlayServices,\n    overlayServices: overlayServices,\n    setOverlayServices: setOverlayServices,\n    overlayReview: overlayReview,\n    overlayEpisodeReviews: overlayEpisodeReviews,\n    getWatchScore: getWatchScore,\n    getTVEpScores: getTVEpScores,\n    setOverlayReview: setOverlayReview,\n    setOverlayEpisodeReviews: setOverlayEpisodeReviews,\n    listenYTLink: listenYTLink,\n    getListenLink: getListenLink,\n    setListenYTLink: setListenYTLink,\n    listenCategoryData: listenCategoryData,\n    setListenCategoryData: setListenCategoryData,\n    getListenCatPlaylist: getListenCatPlaylist,\n    selectedCat: selectedCat,\n    setSelectedCat: setSelectedCat,\n    filterSelected: filterSelected,\n    setFilterSelected: setFilterSelected,\n    movGenresSelected: movGenresSelected,\n    setMovGenresSelected: setMovGenresSelected,\n    tvGenresSelected: tvGenresSelected,\n    setTVGenresSelected: setTVGenresSelected\n  });\n}","map":{"version":3,"sources":["/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/state/index.js"],"names":["useState","useEffect","useCallback","Client","AUSTREAMS","client","AppContainer","children","mediaSelected","setMediaSelected","filterSelected","setFilterSelected","movGenresSelected","setMovGenresSelected","tvGenresSelected","setTVGenresSelected","watchData","setWatchData","listenData","setListenData","searchQuery","setSearchQuery","serviceSelections","setServiceSelections","serviceOptions","setServiceOptions","region","setRegion","openOverlayID","setOpenOverlayID","overlayData","setOverlayData","overlayServices","setOverlayServices","overlayReview","setOverlayReview","overlayEpisodeReviews","setOverlayEpisodeReviews","listenYTLink","setListenYTLink","listenCategoryData","setListenCategoryData","selectedCat","setSelectedCat","value","label","getListenCatPlaylist","categoryID","getListenCatPlaylists","then","data","getWatchData","getListenData","getWatchFilteredData","movieGenres","tvGenres","getOverlayServices","tmdbID","tmdbTitle","releaseYear","mediaType","getWatchStreams","getServiceOptions","regionInput","getWatchRegionServices","onSearchQuery","query","experience","services","getWatchSearchResults","getListenSearchResults","getWatchScore","getWatchIMDBScore","getTVEpScores","getTVEpisodeRatings","getOverlayData","mediaId","getMediaOverlayData","getListenLink","spotifyID","listenType","getListenYoutube","onMediaChange","watch","listen","overlay"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { Client } from \"../client\";\nimport { AUSTREAMS } from \"../constants/index\";\n\n// Instantiate a single instance of the Client, used across\n// the application for fetching of data.\nconst client = new Client(\"http://127.0.0.1:8000\");\n\nexport function AppContainer({ children }) {\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\n  const [filterSelected, setFilterSelected] = useState(\"home\");\n  const [movGenresSelected, setMovGenresSelected] = useState({});\n  const [tvGenresSelected, setTVGenresSelected] = useState({});\n  const [watchData, setWatchData] = useState({});\n  const [listenData, setListenData] = useState({});\n  const [searchQuery, setSearchQuery] = useState({});\n  const [serviceSelections, setServiceSelections] = useState({});\n  const [serviceOptions, setServiceOptions] = useState(AUSTREAMS);\n  const [region, setRegion] = useState(\"AU\");\n  const [openOverlayID, setOpenOverlayID] = useState(-1);\n  const [overlayData, setOverlayData] = useState({});\n  const [overlayServices, setOverlayServices] = useState({});\n  const [overlayReview, setOverlayReview] = useState({});\n  const [overlayEpisodeReviews, setOverlayEpisodeReviews] = useState({});\n  const [listenYTLink, setListenYTLink] = useState({});\n  const [listenCategoryData, setListenCategoryData] = useState({});\n  const [selectedCat, setSelectedCat] = useState({\n    value: \"toplists\",\n    label: \"Top Lists\",\n  });\n\n  const getListenCatPlaylist = useCallback(\n    (categoryID) => {\n      client\n        .getListenCatPlaylists(categoryID)\n        .then((data) => setListenCategoryData(data));\n    },\n    [setListenCategoryData]\n  );\n\n  const getWatchData = useCallback(() => {\n    client.getWatchData().then((data) => setWatchData(data));\n  }, [setWatchData]);\n\n  const getListenData = useCallback(() => {\n    client.getListenData().then((data) => setListenData(data));\n  }, [setListenData]);\n\n  const getWatchFilteredData = useCallback(\n    (movieGenres, tvGenres) => {\n      client\n        .getWatchFilteredData(movieGenres, tvGenres)\n        .then((data) => setWatchData(data));\n    },\n    [setWatchData]\n  );\n\n  const getOverlayServices = useCallback(\n    (tmdbID, tmdbTitle, releaseYear, mediaType) => {\n      client\n        .getWatchStreams(tmdbID, tmdbTitle, releaseYear, mediaType)\n        .then((data) => setOverlayServices(data));\n    },\n    [setOverlayServices]\n  );\n\n  const getServiceOptions = useCallback(\n    (regionInput) => {\n      client.getWatchRegionServices(regionInput).then((data) => {\n        setServiceOptions(data);\n      });\n    },\n    [setServiceOptions]\n  );\n\n  const onSearchQuery = useCallback(\n    (query, experience, services) => {\n      if (experience === \"WATCH\") {\n        client.getWatchSearchResults(query, services).then((data) => {\n          setWatchData(data);\n          setSearchQuery(query);\n        });\n      } else if (experience === \"LISTEN\") {\n        client.getListenSearchResults(query).then((data) => {\n          setListenData(data);\n          setSearchQuery(query);\n        });\n      }\n    },\n    [setSearchQuery, setWatchData, setListenData]\n  );\n\n  const getWatchScore = useCallback(\n    (tmdbID, mediaType) => {\n      client.getWatchIMDBScore(tmdbID, mediaType).then((data) => {\n        setOverlayReview(data);\n      });\n    },\n    [setOverlayReview]\n  );\n\n  const getTVEpScores = useCallback(\n    (tmdbID) => {\n      client.getTVEpisodeRatings(tmdbID).then((data) => {\n        setOverlayEpisodeReviews(data);\n      });\n    },\n    [setOverlayEpisodeReviews]\n  );\n\n  const getOverlayData = useCallback(\n    (mediaId, mediaType) => {\n      setOpenOverlayID(mediaId);\n      client.getMediaOverlayData(mediaId, mediaType).then((data) => {\n        setOverlayData(data);\n      });\n    },\n    [setOverlayData]\n  );\n\n  const getListenLink = useCallback(\n    (spotifyID, listenType) => {\n      client.getListenYoutube(spotifyID, listenType).then((data) => {\n        setListenYTLink(data);\n      });\n    },\n    [setListenYTLink]\n  );\n\n  useEffect(() => {\n    if (mediaSelected === \"WATCH\") {\n      getWatchData();\n    } else {\n      getListenData();\n    }\n  }, [mediaSelected, getWatchData, getListenData]);\n\n  return children({\n    mediaSelected: mediaSelected,\n    onMediaChange: setMediaSelected,\n    onSearchQuery: onSearchQuery,\n    getWatchData: getWatchData,\n    getWatchFilteredData: getWatchFilteredData,\n    getListenData: getListenData,\n    getOverlayData: getOverlayData,\n    getServiceOptions: getServiceOptions,\n    watch: { data: watchData },\n    listen: { data: listenData },\n    overlay: { data: overlayData },\n    setOverlayData: setOverlayData,\n    setSearchQuery: setSearchQuery,\n    searchQuery: searchQuery,\n    openOverlayID: openOverlayID,\n    setOpenOverlayID: setOpenOverlayID,\n    setServiceOptions: setServiceOptions,\n    serviceOptions: serviceOptions,\n    serviceSelections: serviceSelections,\n    setServiceSelections: setServiceSelections,\n    region: region,\n    setRegion: setRegion,\n    getOverlayServices: getOverlayServices,\n    overlayServices: overlayServices,\n    setOverlayServices: setOverlayServices,\n    overlayReview: overlayReview,\n    overlayEpisodeReviews: overlayEpisodeReviews,\n    getWatchScore: getWatchScore,\n    getTVEpScores: getTVEpScores,\n    setOverlayReview: setOverlayReview,\n    setOverlayEpisodeReviews: setOverlayEpisodeReviews,\n    listenYTLink: listenYTLink,\n    getListenLink: getListenLink,\n    setListenYTLink: setListenYTLink,\n    listenCategoryData: listenCategoryData,\n    setListenCategoryData: setListenCategoryData,\n    getListenCatPlaylist: getListenCatPlaylist,\n    selectedCat: selectedCat,\n    setSelectedCat: setSelectedCat,\n    filterSelected: filterSelected,\n    setFilterSelected: setFilterSelected,\n    movGenresSelected: movGenresSelected,\n    setMovGenresSelected: setMovGenresSelected,\n    tvGenresSelected: tvGenresSelected,\n    setTVGenresSelected: setTVGenresSelected,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}