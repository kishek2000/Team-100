{"ast":null,"code":"\"use strict\";\n/**\n * A response from a web request\n */\n\nvar Response =\n/** @class */\nfunction () {\n  function Response(statusCode, headers, body, url) {\n    if (typeof statusCode !== 'number') {\n      throw new TypeError('statusCode must be a number but was ' + typeof statusCode);\n    }\n\n    if (headers === null) {\n      throw new TypeError('headers cannot be null');\n    }\n\n    if (typeof headers !== 'object') {\n      throw new TypeError('headers must be an object but was ' + typeof headers);\n    }\n\n    this.statusCode = statusCode;\n    var headersToLowerCase = {};\n\n    for (var key in headers) {\n      headersToLowerCase[key.toLowerCase()] = headers[key];\n    }\n\n    this.headers = headersToLowerCase;\n    this.body = body;\n    this.url = url;\n  }\n\n  Response.prototype.isError = function () {\n    return this.statusCode === 0 || this.statusCode >= 400;\n  };\n\n  Response.prototype.getBody = function (encoding) {\n    if (this.statusCode === 0) {\n      var err = new Error('This request to ' + this.url + ' resulted in a status code of 0. This usually indicates some kind of network error in a browser (e.g. CORS not being set up or the DNS failing to resolve):\\n' + this.body.toString());\n      err.statusCode = this.statusCode;\n      err.headers = this.headers;\n      err.body = this.body;\n      err.url = this.url;\n      throw err;\n    }\n\n    if (this.statusCode >= 300) {\n      var err = new Error('Server responded to ' + this.url + ' with status code ' + this.statusCode + ':\\n' + this.body.toString());\n      err.statusCode = this.statusCode;\n      err.headers = this.headers;\n      err.body = this.body;\n      err.url = this.url;\n      throw err;\n    }\n\n    if (!encoding || typeof this.body === 'string') {\n      return this.body;\n    }\n\n    return this.body.toString(encoding);\n  };\n\n  return Response;\n}();\n\nmodule.exports = Response;","map":{"version":3,"sources":["/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/node_modules/http-response-object/lib/index.js"],"names":["Response","statusCode","headers","body","url","TypeError","headersToLowerCase","key","toLowerCase","prototype","isError","getBody","encoding","err","Error","toString","module","exports"],"mappings":"AAAA;AACA;;;;AAGA,IAAIA,QAAQ;AAAG;AAAe,YAAY;AACtC,WAASA,QAAT,CAAkBC,UAAlB,EAA8BC,OAA9B,EAAuCC,IAAvC,EAA6CC,GAA7C,EAAkD;AAC9C,QAAI,OAAOH,UAAP,KAAsB,QAA1B,EAAoC;AAChC,YAAM,IAAII,SAAJ,CAAc,yCAAyC,OAAOJ,UAA9D,CAAN;AACH;;AACD,QAAIC,OAAO,KAAK,IAAhB,EAAsB;AAClB,YAAM,IAAIG,SAAJ,CAAc,wBAAd,CAAN;AACH;;AACD,QAAI,OAAOH,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,YAAM,IAAIG,SAAJ,CAAc,uCAAuC,OAAOH,OAA5D,CAAN;AACH;;AACD,SAAKD,UAAL,GAAkBA,UAAlB;AACA,QAAIK,kBAAkB,GAAG,EAAzB;;AACA,SAAK,IAAIC,GAAT,IAAgBL,OAAhB,EAAyB;AACrBI,MAAAA,kBAAkB,CAACC,GAAG,CAACC,WAAJ,EAAD,CAAlB,GAAwCN,OAAO,CAACK,GAAD,CAA/C;AACH;;AACD,SAAKL,OAAL,GAAeI,kBAAf;AACA,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAWA,GAAX;AACH;;AACDJ,EAAAA,QAAQ,CAACS,SAAT,CAAmBC,OAAnB,GAA6B,YAAY;AACrC,WAAO,KAAKT,UAAL,KAAoB,CAApB,IAAyB,KAAKA,UAAL,IAAmB,GAAnD;AACH,GAFD;;AAGAD,EAAAA,QAAQ,CAACS,SAAT,CAAmBE,OAAnB,GAA6B,UAAUC,QAAV,EAAoB;AAC7C,QAAI,KAAKX,UAAL,KAAoB,CAAxB,EAA2B;AACvB,UAAIY,GAAG,GAAG,IAAIC,KAAJ,CAAU,qBAChB,KAAKV,GADW,GAEhB,+JAFgB,GAGhB,KAAKD,IAAL,CAAUY,QAAV,EAHM,CAAV;AAIAF,MAAAA,GAAG,CAACZ,UAAJ,GAAiB,KAAKA,UAAtB;AACAY,MAAAA,GAAG,CAACX,OAAJ,GAAc,KAAKA,OAAnB;AACAW,MAAAA,GAAG,CAACV,IAAJ,GAAW,KAAKA,IAAhB;AACAU,MAAAA,GAAG,CAACT,GAAJ,GAAU,KAAKA,GAAf;AACA,YAAMS,GAAN;AACH;;AACD,QAAI,KAAKZ,UAAL,IAAmB,GAAvB,EAA4B;AACxB,UAAIY,GAAG,GAAG,IAAIC,KAAJ,CAAU,yBAChB,KAAKV,GADW,GAEhB,oBAFgB,GAGhB,KAAKH,UAHW,GAIhB,KAJgB,GAKhB,KAAKE,IAAL,CAAUY,QAAV,EALM,CAAV;AAMAF,MAAAA,GAAG,CAACZ,UAAJ,GAAiB,KAAKA,UAAtB;AACAY,MAAAA,GAAG,CAACX,OAAJ,GAAc,KAAKA,OAAnB;AACAW,MAAAA,GAAG,CAACV,IAAJ,GAAW,KAAKA,IAAhB;AACAU,MAAAA,GAAG,CAACT,GAAJ,GAAU,KAAKA,GAAf;AACA,YAAMS,GAAN;AACH;;AACD,QAAI,CAACD,QAAD,IAAa,OAAO,KAAKT,IAAZ,KAAqB,QAAtC,EAAgD;AAC5C,aAAO,KAAKA,IAAZ;AACH;;AACD,WAAO,KAAKA,IAAL,CAAUY,QAAV,CAAmBH,QAAnB,CAAP;AACH,GA7BD;;AA8BA,SAAOZ,QAAP;AACH,CAtD6B,EAA9B;;AAuDAgB,MAAM,CAACC,OAAP,GAAiBjB,QAAjB","sourcesContent":["\"use strict\";\n/**\n * A response from a web request\n */\nvar Response = /** @class */ (function () {\n    function Response(statusCode, headers, body, url) {\n        if (typeof statusCode !== 'number') {\n            throw new TypeError('statusCode must be a number but was ' + typeof statusCode);\n        }\n        if (headers === null) {\n            throw new TypeError('headers cannot be null');\n        }\n        if (typeof headers !== 'object') {\n            throw new TypeError('headers must be an object but was ' + typeof headers);\n        }\n        this.statusCode = statusCode;\n        var headersToLowerCase = {};\n        for (var key in headers) {\n            headersToLowerCase[key.toLowerCase()] = headers[key];\n        }\n        this.headers = headersToLowerCase;\n        this.body = body;\n        this.url = url;\n    }\n    Response.prototype.isError = function () {\n        return this.statusCode === 0 || this.statusCode >= 400;\n    };\n    Response.prototype.getBody = function (encoding) {\n        if (this.statusCode === 0) {\n            var err = new Error('This request to ' +\n                this.url +\n                ' resulted in a status code of 0. This usually indicates some kind of network error in a browser (e.g. CORS not being set up or the DNS failing to resolve):\\n' +\n                this.body.toString());\n            err.statusCode = this.statusCode;\n            err.headers = this.headers;\n            err.body = this.body;\n            err.url = this.url;\n            throw err;\n        }\n        if (this.statusCode >= 300) {\n            var err = new Error('Server responded to ' +\n                this.url +\n                ' with status code ' +\n                this.statusCode +\n                ':\\n' +\n                this.body.toString());\n            err.statusCode = this.statusCode;\n            err.headers = this.headers;\n            err.body = this.body;\n            err.url = this.url;\n            throw err;\n        }\n        if (!encoding || typeof this.body === 'string') {\n            return this.body;\n        }\n        return this.body.toString(encoding);\n    };\n    return Response;\n}());\nmodule.exports = Response;\n"]},"metadata":{},"sourceType":"script"}