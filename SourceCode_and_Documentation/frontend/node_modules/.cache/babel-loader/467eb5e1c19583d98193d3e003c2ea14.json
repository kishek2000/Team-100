{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport { Client } from \"../client\"; // Instantiate a single instance of the Client, used across\n// the application for fetching of data.\n\nconst client = new Client(\"http://127.0.0.1:8000\");\nexport function AppContainer({\n  children\n}) {\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\n  const [watchData, setWatchData] = useState({});\n  const [listenData, setListenData] = useState({});\n  const [searchQuery, setSearchQuery] = useState({});\n  const [serviceSelections, setServiceSelections] = useState({});\n  const [serviceOptions, setServiceOptions] = useState({});\n  const [region, setRegion] = useState(\"AU\");\n  const [openOverlayID, setOpenOverlayID] = useState(-1);\n  const [overlayData, setOverlayData] = useState({});\n  const [overlayServices, setOverlayServices] = useState({});\n  const getWatchData = useCallback(() => {\n    client.getWatchData().then(data => setWatchData(data));\n  }, [setWatchData]);\n  const getListenData = useCallback(() => {\n    client.getListenData().then(data => setListenData(data));\n  }, [setListenData]);\n  const getOverlayServices = useCallback((tmdbID, tmdbTitle, tmdbPopularity, tmdbScore) => {\n    client.getWatchStreams(tmdbID, tmdbTitle, tmdbPopularity, tmdbScore).then(data => setOverlayServices(data));\n  }, [setOverlayServices]);\n  const getServiceOptions = useCallback(regionInput => {\n    client.getWatchRegionServices(regionInput).then(data => {\n      setServiceOptions(data);\n    });\n  }, [setServiceOptions]);\n  const onSearchQuery = useCallback((query, experience, services) => {\n    if (experience === \"WATCH\") {\n      client.getWatchSearchResults(query, services).then(data => {\n        setWatchData(data);\n        setSearchQuery(query);\n      });\n    } else if (experience === \"LISTEN\") {\n      client.getListenSearchResults(query).then(data => {\n        setListenData(data);\n        setSearchQuery(query);\n      });\n    }\n  }, [setSearchQuery, setWatchData, setListenData]);\n  const getOverlayData = useCallback((mediaId, mediaType) => {\n    setOpenOverlayID(mediaId);\n    client.getMediaOverlayData(mediaId, mediaType).then(data => {\n      setOverlayData(data);\n    });\n  }, [setOverlayData]);\n  useEffect(() => {\n    if (mediaSelected === \"WATCH\") {\n      getWatchData();\n    } else {\n      getListenData();\n    }\n  }, [mediaSelected, getWatchData, getListenData]);\n  return children({\n    mediaSelected: mediaSelected,\n    onMediaChange: setMediaSelected,\n    onSearchQuery: onSearchQuery,\n    getWatchData: getWatchData,\n    getListenData: getListenData,\n    getOverlayData: getOverlayData,\n    getServiceOptions: getServiceOptions,\n    watch: {\n      data: watchData,\n      fetch: getWatchData\n    },\n    listen: {\n      data: listenData,\n      fetch: getListenData\n    },\n    overlay: {\n      data: overlayData\n    },\n    setOverlayData: setOverlayData,\n    setSearchQuery: setSearchQuery,\n    searchQuery: searchQuery,\n    openOverlayID: openOverlayID,\n    setOpenOverlayID: setOpenOverlayID,\n    setServiceOptions: setServiceOptions,\n    serviceOptions: serviceOptions,\n    serviceSelections: serviceSelections,\n    setServiceSelections: setServiceSelections,\n    region: region,\n    setRegion: setRegion,\n    getOverlayServices: getOverlayServices,\n    overlayServices: overlayServices,\n    setOverlayServices: setOverlayServices\n  });\n}","map":{"version":3,"sources":["/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/state/index.js"],"names":["useState","useEffect","useCallback","Client","client","AppContainer","children","mediaSelected","setMediaSelected","watchData","setWatchData","listenData","setListenData","searchQuery","setSearchQuery","serviceSelections","setServiceSelections","serviceOptions","setServiceOptions","region","setRegion","openOverlayID","setOpenOverlayID","overlayData","setOverlayData","overlayServices","setOverlayServices","getWatchData","then","data","getListenData","getOverlayServices","tmdbID","tmdbTitle","tmdbPopularity","tmdbScore","getWatchStreams","getServiceOptions","regionInput","getWatchRegionServices","onSearchQuery","query","experience","services","getWatchSearchResults","getListenSearchResults","getOverlayData","mediaId","mediaType","getMediaOverlayData","onMediaChange","watch","fetch","listen","overlay"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,MAAT,QAAuB,WAAvB,C,CAEA;AACA;;AACA,MAAMC,MAAM,GAAG,IAAID,MAAJ,CAAW,uBAAX,CAAf;AAEA,OAAO,SAASE,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACzC,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,OAAD,CAAlD;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACe,iBAAD,EAAoBC,oBAApB,IAA4ChB,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAACiB,cAAD,EAAiBC,iBAAjB,IAAsClB,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACmB,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACqB,aAAD,EAAgBC,gBAAhB,IAAoCtB,QAAQ,CAAC,CAAC,CAAF,CAAlD;AACA,QAAM,CAACuB,WAAD,EAAcC,cAAd,IAAgCxB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACyB,eAAD,EAAkBC,kBAAlB,IAAwC1B,QAAQ,CAAC,EAAD,CAAtD;AAEA,QAAM2B,YAAY,GAAGzB,WAAW,CAAC,MAAM;AACrCE,IAAAA,MAAM,CAACuB,YAAP,GAAsBC,IAAtB,CAA4BC,IAAD,IAAUnB,YAAY,CAACmB,IAAD,CAAjD;AACD,GAF+B,EAE7B,CAACnB,YAAD,CAF6B,CAAhC;AAIA,QAAMoB,aAAa,GAAG5B,WAAW,CAAC,MAAM;AACtCE,IAAAA,MAAM,CAAC0B,aAAP,GAAuBF,IAAvB,CAA6BC,IAAD,IAAUjB,aAAa,CAACiB,IAAD,CAAnD;AACD,GAFgC,EAE9B,CAACjB,aAAD,CAF8B,CAAjC;AAIA,QAAMmB,kBAAkB,GAAG7B,WAAW,CACpC,CAAC8B,MAAD,EAASC,SAAT,EAAoBC,cAApB,EAAoCC,SAApC,KAAkD;AAChD/B,IAAAA,MAAM,CACHgC,eADH,CACmBJ,MADnB,EAC2BC,SAD3B,EACsCC,cADtC,EACsDC,SADtD,EAEGP,IAFH,CAESC,IAAD,IAAUH,kBAAkB,CAACG,IAAD,CAFpC;AAGD,GALmC,EAMpC,CAACH,kBAAD,CANoC,CAAtC;AASA,QAAMW,iBAAiB,GAAGnC,WAAW,CAClCoC,WAAD,IAAiB;AACflC,IAAAA,MAAM,CAACmC,sBAAP,CAA8BD,WAA9B,EAA2CV,IAA3C,CAAiDC,IAAD,IAAU;AACxDX,MAAAA,iBAAiB,CAACW,IAAD,CAAjB;AACD,KAFD;AAGD,GALkC,EAMnC,CAACX,iBAAD,CANmC,CAArC;AASA,QAAMsB,aAAa,GAAGtC,WAAW,CAC/B,CAACuC,KAAD,EAAQC,UAAR,EAAoBC,QAApB,KAAiC;AAC/B,QAAID,UAAU,KAAK,OAAnB,EAA4B;AAC1BtC,MAAAA,MAAM,CAACwC,qBAAP,CAA6BH,KAA7B,EAAoCE,QAApC,EAA8Cf,IAA9C,CAAoDC,IAAD,IAAU;AAC3DnB,QAAAA,YAAY,CAACmB,IAAD,CAAZ;AACAf,QAAAA,cAAc,CAAC2B,KAAD,CAAd;AACD,OAHD;AAID,KALD,MAKO,IAAIC,UAAU,KAAK,QAAnB,EAA6B;AAClCtC,MAAAA,MAAM,CAACyC,sBAAP,CAA8BJ,KAA9B,EAAqCb,IAArC,CAA2CC,IAAD,IAAU;AAClDjB,QAAAA,aAAa,CAACiB,IAAD,CAAb;AACAf,QAAAA,cAAc,CAAC2B,KAAD,CAAd;AACD,OAHD;AAID;AACF,GAb8B,EAc/B,CAAC3B,cAAD,EAAiBJ,YAAjB,EAA+BE,aAA/B,CAd+B,CAAjC;AAiBA,QAAMkC,cAAc,GAAG5C,WAAW,CAChC,CAAC6C,OAAD,EAAUC,SAAV,KAAwB;AACtB1B,IAAAA,gBAAgB,CAACyB,OAAD,CAAhB;AACA3C,IAAAA,MAAM,CAAC6C,mBAAP,CAA2BF,OAA3B,EAAoCC,SAApC,EAA+CpB,IAA/C,CAAqDC,IAAD,IAAU;AAC5DL,MAAAA,cAAc,CAACK,IAAD,CAAd;AACD,KAFD;AAGD,GAN+B,EAOhC,CAACL,cAAD,CAPgC,CAAlC;AAUAvB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,aAAa,KAAK,OAAtB,EAA+B;AAC7BoB,MAAAA,YAAY;AACb,KAFD,MAEO;AACLG,MAAAA,aAAa;AACd;AACF,GANQ,EAMN,CAACvB,aAAD,EAAgBoB,YAAhB,EAA8BG,aAA9B,CANM,CAAT;AAQA,SAAOxB,QAAQ,CAAC;AACdC,IAAAA,aAAa,EAAEA,aADD;AAEd2C,IAAAA,aAAa,EAAE1C,gBAFD;AAGdgC,IAAAA,aAAa,EAAEA,aAHD;AAIdb,IAAAA,YAAY,EAAEA,YAJA;AAKdG,IAAAA,aAAa,EAAEA,aALD;AAMdgB,IAAAA,cAAc,EAAEA,cANF;AAOdT,IAAAA,iBAAiB,EAAEA,iBAPL;AAQdc,IAAAA,KAAK,EAAE;AAAEtB,MAAAA,IAAI,EAAEpB,SAAR;AAAmB2C,MAAAA,KAAK,EAAEzB;AAA1B,KARO;AASd0B,IAAAA,MAAM,EAAE;AAAExB,MAAAA,IAAI,EAAElB,UAAR;AAAoByC,MAAAA,KAAK,EAAEtB;AAA3B,KATM;AAUdwB,IAAAA,OAAO,EAAE;AAAEzB,MAAAA,IAAI,EAAEN;AAAR,KAVK;AAWdC,IAAAA,cAAc,EAAEA,cAXF;AAYdV,IAAAA,cAAc,EAAEA,cAZF;AAadD,IAAAA,WAAW,EAAEA,WAbC;AAcdQ,IAAAA,aAAa,EAAEA,aAdD;AAedC,IAAAA,gBAAgB,EAAEA,gBAfJ;AAgBdJ,IAAAA,iBAAiB,EAAEA,iBAhBL;AAiBdD,IAAAA,cAAc,EAAEA,cAjBF;AAkBdF,IAAAA,iBAAiB,EAAEA,iBAlBL;AAmBdC,IAAAA,oBAAoB,EAAEA,oBAnBR;AAoBdG,IAAAA,MAAM,EAAEA,MApBM;AAqBdC,IAAAA,SAAS,EAAEA,SArBG;AAsBdW,IAAAA,kBAAkB,EAAEA,kBAtBN;AAuBdN,IAAAA,eAAe,EAAEA,eAvBH;AAwBdC,IAAAA,kBAAkB,EAAEA;AAxBN,GAAD,CAAf;AA0BD","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { Client } from \"../client\";\n\n// Instantiate a single instance of the Client, used across\n// the application for fetching of data.\nconst client = new Client(\"http://127.0.0.1:8000\");\n\nexport function AppContainer({ children }) {\n  const [mediaSelected, setMediaSelected] = useState(\"WATCH\");\n  const [watchData, setWatchData] = useState({});\n  const [listenData, setListenData] = useState({});\n  const [searchQuery, setSearchQuery] = useState({});\n  const [serviceSelections, setServiceSelections] = useState({});\n  const [serviceOptions, setServiceOptions] = useState({});\n  const [region, setRegion] = useState(\"AU\");\n  const [openOverlayID, setOpenOverlayID] = useState(-1);\n  const [overlayData, setOverlayData] = useState({});\n  const [overlayServices, setOverlayServices] = useState({});\n\n  const getWatchData = useCallback(() => {\n    client.getWatchData().then((data) => setWatchData(data));\n  }, [setWatchData]);\n\n  const getListenData = useCallback(() => {\n    client.getListenData().then((data) => setListenData(data));\n  }, [setListenData]);\n\n  const getOverlayServices = useCallback(\n    (tmdbID, tmdbTitle, tmdbPopularity, tmdbScore) => {\n      client\n        .getWatchStreams(tmdbID, tmdbTitle, tmdbPopularity, tmdbScore)\n        .then((data) => setOverlayServices(data));\n    },\n    [setOverlayServices]\n  );\n\n  const getServiceOptions = useCallback(\n    (regionInput) => {\n      client.getWatchRegionServices(regionInput).then((data) => {\n        setServiceOptions(data);\n      });\n    },\n    [setServiceOptions]\n  );\n\n  const onSearchQuery = useCallback(\n    (query, experience, services) => {\n      if (experience === \"WATCH\") {\n        client.getWatchSearchResults(query, services).then((data) => {\n          setWatchData(data);\n          setSearchQuery(query);\n        });\n      } else if (experience === \"LISTEN\") {\n        client.getListenSearchResults(query).then((data) => {\n          setListenData(data);\n          setSearchQuery(query);\n        });\n      }\n    },\n    [setSearchQuery, setWatchData, setListenData]\n  );\n\n  const getOverlayData = useCallback(\n    (mediaId, mediaType) => {\n      setOpenOverlayID(mediaId);\n      client.getMediaOverlayData(mediaId, mediaType).then((data) => {\n        setOverlayData(data);\n      });\n    },\n    [setOverlayData]\n  );\n\n  useEffect(() => {\n    if (mediaSelected === \"WATCH\") {\n      getWatchData();\n    } else {\n      getListenData();\n    }\n  }, [mediaSelected, getWatchData, getListenData]);\n\n  return children({\n    mediaSelected: mediaSelected,\n    onMediaChange: setMediaSelected,\n    onSearchQuery: onSearchQuery,\n    getWatchData: getWatchData,\n    getListenData: getListenData,\n    getOverlayData: getOverlayData,\n    getServiceOptions: getServiceOptions,\n    watch: { data: watchData, fetch: getWatchData },\n    listen: { data: listenData, fetch: getListenData },\n    overlay: { data: overlayData },\n    setOverlayData: setOverlayData,\n    setSearchQuery: setSearchQuery,\n    searchQuery: searchQuery,\n    openOverlayID: openOverlayID,\n    setOpenOverlayID: setOpenOverlayID,\n    setServiceOptions: setServiceOptions,\n    serviceOptions: serviceOptions,\n    serviceSelections: serviceSelections,\n    setServiceSelections: setServiceSelections,\n    region: region,\n    setRegion: setRegion,\n    getOverlayServices: getOverlayServices,\n    overlayServices: overlayServices,\n    setOverlayServices: setOverlayServices,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}