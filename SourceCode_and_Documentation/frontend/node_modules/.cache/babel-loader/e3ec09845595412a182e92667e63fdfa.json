{"ast":null,"code":"export class Client {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n  }\n\n  async api(endpoint) {\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    if (!response.ok) {\n      throw Error(response.text);\n    } else {\n      return await response.json();\n    }\n  }\n\n  async getWatchData() {\n    const data = await this.api(\"/api/home/watch\");\n    return data;\n  }\n\n  async getListenData() {\n    const data = await this.api(\"/api/home/listen\");\n    return data;\n  }\n\n  async getFilteredWatchData(movieGenres, tvGenres, watchCategory) {\n    if (movieGenres === undefined) {\n      movieGenres = \"\";\n    }\n\n    if (tvGenres === undefined) {\n      tvGenres = \"\";\n    }\n\n    if (String(movieGenres).length === 0 && String(tvGenres).length > 0) {\n      const data = await this.api(`/api/home/watch/filtered/none/${tvGenres}/${watchCategory}`);\n      return data;\n    } else if (String(tvGenres).length === 0 && String(movieGenres).length > 0) {\n      const data = await this.api(`/api/home/watch/filtered/${movieGenres}/none/${watchCategory}`);\n      return data;\n    } else {\n      const data = await this.api(`/api/home/watch/filtered/${movieGenres}/${tvGenres}/${watchCategory}`);\n      return data;\n    }\n  }\n\n  async getWatchSearchResults(query, services) {\n    if (services === undefined || Object.keys(services).length === 0) {\n      const data = await this.api(`/api/search/watch/unfiltered/${query}`);\n      return data;\n    } else {\n      const data = await this.api(`/api/search/watch/filtered/${query}/${services}`);\n      return data;\n    }\n  }\n\n  async getWatchRegionServices(region) {\n    const data = await this.api(`/api/search/watch/filters/${region}`);\n    return data.list;\n  }\n\n  async getListenSearchResults(query) {\n    const data = await this.api(`/api/search/listen/${query}`);\n    return data;\n  }\n\n  async getMediaOverlayData(mediaId, mediaType) {\n    const data = await this.api(`/api/details/${mediaType.toLowerCase()}/${mediaId}`);\n    return data.data;\n  }\n\n  async getWatchIMDBScore(tmdbID, mediaType) {\n    const data = await this.api(`/api/reviews/title/${tmdbID}/${mediaType}`);\n    return data.rating;\n  }\n\n  async getTVEpisodeRatings(tmdbID) {\n    const data = await this.api(`/api/reviews/episodes/${tmdbID}`);\n    return data.episodes;\n  }\n\n  async getWatchStreams(tmdbID, tmdbTitle, releaseYear, mediaType) {\n    const data = await this.api(`/api/services/tv/${tmdbID}/${tmdbTitle}/${releaseYear}/${mediaType}`);\n    return data.data;\n  }\n\n  async getListenYoutube(spotifyID, type) {\n    const data = await this.api(`/api/services/listen/${spotifyID}/${type}`);\n    return data.data;\n  }\n\n  async getListenCatPlaylists(categoryId) {\n    const data = await this.api(`/api/details/listen/category/${categoryId}`);\n    return data.data;\n  }\n\n}","map":{"version":3,"sources":["/Users/adikishore/Documents/University/Team-100/SourceCode_and_Documentation/frontend/src/client/index.js"],"names":["Client","constructor","baseUrl","api","endpoint","response","fetch","headers","ok","Error","text","json","getWatchData","data","getListenData","getFilteredWatchData","movieGenres","tvGenres","watchCategory","undefined","String","length","getWatchSearchResults","query","services","Object","keys","getWatchRegionServices","region","list","getListenSearchResults","getMediaOverlayData","mediaId","mediaType","toLowerCase","getWatchIMDBScore","tmdbID","rating","getTVEpisodeRatings","episodes","getWatchStreams","tmdbTitle","releaseYear","getListenYoutube","spotifyID","type","getListenCatPlaylists","categoryId"],"mappings":"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","sourcesContent":["export class Client {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n  }\n\n  async api(endpoint) {\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    if (!response.ok) {\n      throw Error(response.text);\n    } else {\n      return await response.json();\n    }\n  }\n\n  async getWatchData() {\n    const data = await this.api(\"/api/home/watch\");\n    return data;\n  }\n\n  async getListenData() {\n    const data = await this.api(\"/api/home/listen\");\n    return data;\n  }\n\n  async getFilteredWatchData(movieGenres, tvGenres, watchCategory) {\n    if (movieGenres === undefined) {\n      movieGenres = \"\";\n    }\n    if (tvGenres === undefined) {\n      tvGenres = \"\";\n    }\n    if (String(movieGenres).length === 0 && String(tvGenres).length > 0) {\n      const data = await this.api(\n        `/api/home/watch/filtered/none/${tvGenres}/${watchCategory}`\n      );\n      return data;\n    } else if (\n      String(tvGenres).length === 0 &&\n      String(movieGenres).length > 0\n    ) {\n      const data = await this.api(\n        `/api/home/watch/filtered/${movieGenres}/none/${watchCategory}`\n      );\n      return data;\n    } else {\n      const data = await this.api(\n        `/api/home/watch/filtered/${movieGenres}/${tvGenres}/${watchCategory}`\n      );\n      return data;\n    }\n  }\n\n  async getWatchSearchResults(query, services) {\n    if (services === undefined || Object.keys(services).length === 0) {\n      const data = await this.api(`/api/search/watch/unfiltered/${query}`);\n      return data;\n    } else {\n      const data = await this.api(\n        `/api/search/watch/filtered/${query}/${services}`\n      );\n      return data;\n    }\n  }\n\n  async getWatchRegionServices(region) {\n    const data = await this.api(`/api/search/watch/filters/${region}`);\n    return data.list;\n  }\n\n  async getListenSearchResults(query) {\n    const data = await this.api(`/api/search/listen/${query}`);\n    return data;\n  }\n\n  async getMediaOverlayData(mediaId, mediaType) {\n    const data = await this.api(\n      `/api/details/${mediaType.toLowerCase()}/${mediaId}`\n    );\n    return data.data;\n  }\n\n  async getWatchIMDBScore(tmdbID, mediaType) {\n    const data = await this.api(`/api/reviews/title/${tmdbID}/${mediaType}`);\n    return data.rating;\n  }\n\n  async getTVEpisodeRatings(tmdbID) {\n    const data = await this.api(`/api/reviews/episodes/${tmdbID}`);\n    return data.episodes;\n  }\n\n  async getWatchStreams(tmdbID, tmdbTitle, releaseYear, mediaType) {\n    const data = await this.api(\n      `/api/services/tv/${tmdbID}/${tmdbTitle}/${releaseYear}/${mediaType}`\n    );\n    return data.data;\n  }\n\n  async getListenYoutube(spotifyID, type) {\n    const data = await this.api(`/api/services/listen/${spotifyID}/${type}`);\n    return data.data;\n  }\n\n  async getListenCatPlaylists(categoryId) {\n    const data = await this.api(`/api/details/listen/category/${categoryId}`);\n    return data.data;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}